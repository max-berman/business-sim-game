{"id":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591206076000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/ArcadePhysics.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/utils/Class.js"},{"name":"../../math/DegToRad","loc":{"line":8,"column":23},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/ArcadePhysics.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/math/DegToRad.js"},{"name":"../../math/distance/DistanceBetween","loc":{"line":9,"column":30},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/ArcadePhysics.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/math/distance/DistanceBetween.js"},{"name":"../../math/distance/DistanceSquared","loc":{"line":10,"column":30},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/ArcadePhysics.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/math/distance/DistanceSquared.js"},{"name":"./Factory","loc":{"line":11,"column":22},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/ArcadePhysics.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/Factory.js"},{"name":"../../utils/object/GetFastValue","loc":{"line":12,"column":27},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/ArcadePhysics.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/utils/object/GetFastValue.js"},{"name":"../../utils/object/Merge","loc":{"line":13,"column":20},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/ArcadePhysics.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/utils/object/Merge.js"},{"name":"./components/OverlapCirc","loc":{"line":14,"column":26},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/ArcadePhysics.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/components/OverlapCirc.js"},{"name":"./components/OverlapRect","loc":{"line":15,"column":26},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/ArcadePhysics.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/components/OverlapRect.js"},{"name":"../../plugins/PluginCache","loc":{"line":16,"column":26},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/ArcadePhysics.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/plugins/PluginCache.js"},{"name":"../../scene/events","loc":{"line":17,"column":26},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/ArcadePhysics.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/scene/events/index.js"},{"name":"../../math/Vector2","loc":{"line":18,"column":22},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/ArcadePhysics.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/math/Vector2.js"},{"name":"./World","loc":{"line":19,"column":20},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/ArcadePhysics.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/physics/arcade/World.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar DegToRad = require('../../math/DegToRad');\r\nvar DistanceBetween = require('../../math/distance/DistanceBetween');\r\nvar DistanceSquared = require('../../math/distance/DistanceSquared');\r\nvar Factory = require('./Factory');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Merge = require('../../utils/object/Merge');\r\nvar OverlapCirc = require('./components/OverlapCirc');\r\nvar OverlapRect = require('./components/OverlapRect');\r\nvar PluginCache = require('../../plugins/PluginCache');\r\nvar SceneEvents = require('../../scene/events');\r\nvar Vector2 = require('../../math/Vector2');\r\nvar World = require('./World');\r\n\r\n/**\r\n * @classdesc\r\n * The Arcade Physics Plugin belongs to a Scene and sets up and manages the Scene's physics simulation.\r\n * It also holds some useful methods for moving and rotating Arcade Physics Bodies.\r\n *\r\n * You can access it from within a Scene using `this.physics`.\r\n *\r\n * Arcade Physics uses the Projection Method of collision resolution and separation. While it's fast and suitable\r\n * for 'arcade' style games it lacks stability when multiple objects are in close proximity or resting upon each other.\r\n * The separation that stops two objects penetrating may create a new penetration against a different object. If you\r\n * require a high level of stability please consider using an alternative physics system, such as Matter.js.\r\n *\r\n * @class ArcadePhysics\r\n * @memberof Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene that this Plugin belongs to.\r\n */\r\nvar ArcadePhysics = new Class({\r\n\r\n    initialize:\r\n\r\n    function ArcadePhysics (scene)\r\n    {\r\n        /**\r\n         * The Scene that this Plugin belongs to.\r\n         *\r\n         * @name Phaser.Physics.Arcade.ArcadePhysics#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * The Scene's Systems.\r\n         *\r\n         * @name Phaser.Physics.Arcade.ArcadePhysics#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * A configuration object. Union of the `physics.arcade.*` properties of the GameConfig and SceneConfig objects.\r\n         *\r\n         * @name Phaser.Physics.Arcade.ArcadePhysics#config\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.config = this.getConfig();\r\n\r\n        /**\r\n         * The physics simulation.\r\n         *\r\n         * @name Phaser.Physics.Arcade.ArcadePhysics#world\r\n         * @type {Phaser.Physics.Arcade.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world;\r\n\r\n        /**\r\n         * An object holding the Arcade Physics factory methods.\r\n         *\r\n         * @name Phaser.Physics.Arcade.ArcadePhysics#add\r\n         * @type {Phaser.Physics.Arcade.Factory}\r\n         * @since 3.0.0\r\n         */\r\n        this.add;\r\n\r\n        scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\r\n        scene.sys.events.on(SceneEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.world = new World(this.scene, this.config);\r\n        this.add = new Factory(this.world);\r\n\r\n        this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (!this.world)\r\n        {\r\n            this.world = new World(this.scene, this.config);\r\n            this.add = new Factory(this.world);\r\n        }\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on(SceneEvents.UPDATE, this.world.update, this.world);\r\n        eventEmitter.on(SceneEvents.POST_UPDATE, this.world.postUpdate, this.world);\r\n        eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * Creates the physics configuration for the current Scene.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#getConfig\r\n     * @since 3.0.0\r\n     *\r\n     * @return {object} The physics configuration.\r\n     */\r\n    getConfig: function ()\r\n    {\r\n        var gameConfig = this.systems.game.config.physics;\r\n        var sceneConfig = this.systems.settings.physics;\r\n\r\n        var config = Merge(\r\n            GetFastValue(sceneConfig, 'arcade', {}),\r\n            GetFastValue(gameConfig, 'arcade', {})\r\n        );\r\n\r\n        return config;\r\n    },\r\n\r\n    /**\r\n     * Tests if Game Objects overlap. See {@link Phaser.Physics.Arcade.World#overlap}\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#overlap\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object1 - The first object or array of objects to check.\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} [object2] - The second object or array of objects to check, or `undefined`.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they overlap. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {*} [callbackContext] - The context in which to run the callbacks.\r\n     *\r\n     * @return {boolean} True if at least one Game Object overlaps another.\r\n     *\r\n     * @see Phaser.Physics.Arcade.World#overlap\r\n     */\r\n    overlap: function (object1, object2, overlapCallback, processCallback, callbackContext)\r\n    {\r\n        if (overlapCallback === undefined) { overlapCallback = null; }\r\n        if (processCallback === undefined) { processCallback = null; }\r\n        if (callbackContext === undefined) { callbackContext = overlapCallback; }\r\n\r\n        return this.world.collideObjects(object1, object2, overlapCallback, processCallback, callbackContext, true);\r\n    },\r\n\r\n    /**\r\n     * Performs a collision check and separation between the two physics enabled objects given, which can be single\r\n     * Game Objects, arrays of Game Objects, Physics Groups, arrays of Physics Groups or normal Groups.\r\n     *\r\n     * If you don't require separation then use {@link #overlap} instead.\r\n     *\r\n     * If two Groups or arrays are passed, each member of one will be tested against each member of the other.\r\n     *\r\n     * If **only** one Group is passed (as `object1`), each member of the Group will be collided against the other members.\r\n     *\r\n     * If **only** one Array is passed, the array is iterated and every element in it is tested against the others.\r\n     *\r\n     * Two callbacks can be provided. The `collideCallback` is invoked if a collision occurs and the two colliding\r\n     * objects are passed to it.\r\n     *\r\n     * Arcade Physics uses the Projection Method of collision resolution and separation. While it's fast and suitable\r\n     * for 'arcade' style games it lacks stability when multiple objects are in close proximity or resting upon each other.\r\n     * The separation that stops two objects penetrating may create a new penetration against a different object. If you\r\n     * require a high level of stability please consider using an alternative physics system, such as Matter.js.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#collide\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object1 - The first object or array of objects to check.\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} [object2] - The second object or array of objects to check, or `undefined`.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {*} [callbackContext] - The context in which to run the callbacks.\r\n     *\r\n     * @return {boolean} True if any overlapping Game Objects were separated, otherwise false.\r\n     *\r\n     * @see Phaser.Physics.Arcade.World#collide\r\n     */\r\n    collide: function (object1, object2, collideCallback, processCallback, callbackContext)\r\n    {\r\n        if (collideCallback === undefined) { collideCallback = null; }\r\n        if (processCallback === undefined) { processCallback = null; }\r\n        if (callbackContext === undefined) { callbackContext = collideCallback; }\r\n\r\n        return this.world.collideObjects(object1, object2, collideCallback, processCallback, callbackContext, false);\r\n    },\r\n\r\n    /**\r\n     * This advanced method is specifically for testing for collision between a single Sprite and an array of Tile objects.\r\n     *\r\n     * You should generally use the `collide` method instead, with a Sprite vs. a Tilemap Layer, as that will perform\r\n     * tile filtering and culling for you, as well as handle the interesting face collision automatically.\r\n     *\r\n     * This method is offered for those who would like to check for collision with specific Tiles in a layer, without\r\n     * having to set any collision attributes on the tiles in question. This allows you to perform quick dynamic collisions\r\n     * on small sets of Tiles. As such, no culling or checks are made to the array of Tiles given to this method,\r\n     * you should filter them before passing them to this method.\r\n     *\r\n     * Important: Use of this method skips the `interesting faces` system that Tilemap Layers use. This means if you have\r\n     * say a row or column of tiles, and you jump into, or walk over them, it's possible to get stuck on the edges of the\r\n     * tiles as the interesting face calculations are skipped. However, for quick-fire small collision set tests on\r\n     * dynamic maps, this method can prove very useful.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#collideTiles\r\n     * @fires Phaser.Physics.Arcade.Events#TILE_COLLIDE\r\n     * @since 3.17.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} sprite - The first object to check for collision.\r\n     * @param {Phaser.Tilemaps.Tile[]} tiles - An array of Tiles to check for collision against.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {any} [callbackContext] - The context in which to run the callbacks.\r\n     *\r\n     * @return {boolean} True if any objects overlap (with `overlapOnly`); or true if any overlapping objects were separated.\r\n     */\r\n    collideTiles: function (sprite, tiles, collideCallback, processCallback, callbackContext)\r\n    {\r\n        return this.world.collideTiles(sprite, tiles, collideCallback, processCallback, callbackContext);\r\n    },\r\n\r\n    /**\r\n     * This advanced method is specifically for testing for overlaps between a single Sprite and an array of Tile objects.\r\n     *\r\n     * You should generally use the `overlap` method instead, with a Sprite vs. a Tilemap Layer, as that will perform\r\n     * tile filtering and culling for you, as well as handle the interesting face collision automatically.\r\n     *\r\n     * This method is offered for those who would like to check for overlaps with specific Tiles in a layer, without\r\n     * having to set any collision attributes on the tiles in question. This allows you to perform quick dynamic overlap\r\n     * tests on small sets of Tiles. As such, no culling or checks are made to the array of Tiles given to this method,\r\n     * you should filter them before passing them to this method.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#overlapTiles\r\n     * @fires Phaser.Physics.Arcade.Events#TILE_OVERLAP\r\n     * @since 3.17.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} sprite - The first object to check for collision.\r\n     * @param {Phaser.Tilemaps.Tile[]} tiles - An array of Tiles to check for collision against.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects overlap.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {any} [callbackContext] - The context in which to run the callbacks.\r\n     *\r\n     * @return {boolean} True if any objects overlap (with `overlapOnly`); or true if any overlapping objects were separated.\r\n     */\r\n    overlapTiles: function (sprite, tiles, collideCallback, processCallback, callbackContext)\r\n    {\r\n        return this.world.overlapTiles(sprite, tiles, collideCallback, processCallback, callbackContext);\r\n    },\r\n\r\n    /**\r\n     * Pauses the simulation.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Arcade.World} The simulation.\r\n     */\r\n    pause: function ()\r\n    {\r\n        return this.world.pause();\r\n    },\r\n\r\n    /**\r\n     * Resumes the simulation (if paused).\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Arcade.World} The simulation.\r\n     */\r\n    resume: function ()\r\n    {\r\n        return this.world.resume();\r\n    },\r\n\r\n    /**\r\n     * Sets the acceleration.x/y property on the game object so it will move towards the x/y coordinates at the given rate (in pixels per second squared)\r\n     *\r\n     * You must give a maximum speed value, beyond which the game object won't go any faster.\r\n     *\r\n     * Note: The game object does not continuously track the target. If the target changes location during transit the game object will not modify its course.\r\n     * Note: The game object doesn't stop moving once it reaches the destination coordinates.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#accelerateTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - Any Game Object with an Arcade Physics body.\r\n     * @param {number} x - The x coordinate to accelerate towards.\r\n     * @param {number} y - The y coordinate to accelerate towards.\r\n     * @param {number} [speed=60] - The acceleration (change in speed) in pixels per second squared.\r\n     * @param {number} [xSpeedMax=500] - The maximum x velocity the game object can reach.\r\n     * @param {number} [ySpeedMax=500] - The maximum y velocity the game object can reach.\r\n     *\r\n     * @return {number} The angle (in radians) that the object should be visually set to in order to match its new velocity.\r\n     */\r\n    accelerateTo: function (gameObject, x, y, speed, xSpeedMax, ySpeedMax)\r\n    {\r\n        if (speed === undefined) { speed = 60; }\r\n\r\n        var angle = Math.atan2(y - gameObject.y, x - gameObject.x);\r\n\r\n        gameObject.body.acceleration.setToPolar(angle, speed);\r\n\r\n        if (xSpeedMax !== undefined && ySpeedMax !== undefined)\r\n        {\r\n            gameObject.body.maxVelocity.set(xSpeedMax, ySpeedMax);\r\n        }\r\n\r\n        return angle;\r\n    },\r\n\r\n    /**\r\n     * Sets the acceleration.x/y property on the game object so it will move towards the x/y coordinates at the given rate (in pixels per second squared)\r\n     *\r\n     * You must give a maximum speed value, beyond which the game object won't go any faster.\r\n     *\r\n     * Note: The game object does not continuously track the target. If the target changes location during transit the game object will not modify its course.\r\n     * Note: The game object doesn't stop moving once it reaches the destination coordinates.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#accelerateToObject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - Any Game Object with an Arcade Physics body.\r\n     * @param {Phaser.GameObjects.GameObject} destination - The Game Object to move towards. Can be any object but must have visible x/y properties.\r\n     * @param {number} [speed=60] - The acceleration (change in speed) in pixels per second squared.\r\n     * @param {number} [xSpeedMax=500] - The maximum x velocity the game object can reach.\r\n     * @param {number} [ySpeedMax=500] - The maximum y velocity the game object can reach.\r\n     *\r\n     * @return {number} The angle (in radians) that the object should be visually set to in order to match its new velocity.\r\n     */\r\n    accelerateToObject: function (gameObject, destination, speed, xSpeedMax, ySpeedMax)\r\n    {\r\n        return this.accelerateTo(gameObject, destination.x, destination.y, speed, xSpeedMax, ySpeedMax);\r\n    },\r\n\r\n    /**\r\n     * Finds the Body or Game Object closest to a source point or object.\r\n     *\r\n     * If a `targets` argument is passed, this method finds the closest of those.\r\n     * The targets can be Arcade Physics Game Objects, Dynamic Bodies, or Static Bodies.\r\n     *\r\n     * If no `targets` argument is passed, this method finds the closest Dynamic Body.\r\n     *\r\n     * If two or more targets are the exact same distance from the source point, only the first target\r\n     * is returned.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#closest\r\n     * @since 3.0.0\r\n     *\r\n     * @param {any} source - Any object with public `x` and `y` properties, such as a Game Object or Geometry object.\r\n     * @param {(Phaser.Physics.Arcade.Body[]|Phaser.Physics.Arcade.StaticBody[]|Phaser.GameObjects.GameObject[])} [targets] - The targets.\r\n     *\r\n     * @return {?(Phaser.Physics.Arcade.Body|Phaser.Physics.Arcade.StaticBody|Phaser.GameObjects.GameObject)} The target closest to the given source point.\r\n     */\r\n    closest: function (source, targets)\r\n    {\r\n        if (!targets)\r\n        {\r\n            targets = this.world.bodies.entries;\r\n        }\r\n\r\n        var min = Number.MAX_VALUE;\r\n        var closest = null;\r\n        var x = source.x;\r\n        var y = source.y;\r\n        var len = targets.length;\r\n\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            var target = targets[i];\r\n            var body = target.body || target;\r\n\r\n            if (source === target || source === body || source === body.gameObject || source === body.center)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var distance = DistanceSquared(x, y, body.center.x, body.center.y);\r\n\r\n            if (distance < min)\r\n            {\r\n                closest = target;\r\n                min = distance;\r\n            }\r\n        }\r\n\r\n        return closest;\r\n    },\r\n\r\n    /**\r\n     * Finds the Body or Game Object farthest from a source point or object.\r\n     *\r\n     * If a `targets` argument is passed, this method finds the farthest of those.\r\n     * The targets can be Arcade Physics Game Objects, Dynamic Bodies, or Static Bodies.\r\n     *\r\n     * If no `targets` argument is passed, this method finds the farthest Dynamic Body.\r\n     *\r\n     * If two or more targets are the exact same distance from the source point, only the first target\r\n     * is returned.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#furthest\r\n     * @since 3.0.0\r\n     *\r\n     * @param {any} source - Any object with public `x` and `y` properties, such as a Game Object or Geometry object.\r\n     * @param {(Phaser.Physics.Arcade.Body[]|Phaser.Physics.Arcade.StaticBody[]|Phaser.GameObjects.GameObject[])} [targets] - The targets.\r\n     *\r\n     * @return {?(Phaser.Physics.Arcade.Body|Phaser.Physics.Arcade.StaticBody|Phaser.GameObjects.GameObject)} The target farthest from the given source point.\r\n     */\r\n    furthest: function (source, targets)\r\n    {\r\n        if (!targets)\r\n        {\r\n            targets = this.world.bodies.entries;\r\n        }\r\n\r\n        var max = -1;\r\n        var farthest = null;\r\n        var x = source.x;\r\n        var y = source.y;\r\n        var len = targets.length;\r\n\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            var target = targets[i];\r\n            var body = target.body || target;\r\n\r\n            if (source === target || source === body || source === body.gameObject || source === body.center)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var distance = DistanceSquared(x, y, body.center.x, body.center.y);\r\n\r\n            if (distance > max)\r\n            {\r\n                farthest = target;\r\n                max = distance;\r\n            }\r\n\r\n        }\r\n\r\n        return farthest;\r\n    },\r\n\r\n    /**\r\n     * Move the given display object towards the x/y coordinates at a steady velocity.\r\n     * If you specify a maxTime then it will adjust the speed (over-writing what you set) so it arrives at the destination in that number of seconds.\r\n     * Timings are approximate due to the way browser timers work. Allow for a variance of +- 50ms.\r\n     * Note: The display object does not continuously track the target. If the target changes location during transit the display object will not modify its course.\r\n     * Note: The display object doesn't stop moving once it reaches the destination coordinates.\r\n     * Note: Doesn't take into account acceleration, maxVelocity or drag (if you've set drag or acceleration too high this object may not move at all)\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#moveTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - Any Game Object with an Arcade Physics body.\r\n     * @param {number} x - The x coordinate to move towards.\r\n     * @param {number} y - The y coordinate to move towards.\r\n     * @param {number} [speed=60] - The speed it will move, in pixels per second (default is 60 pixels/sec)\r\n     * @param {number} [maxTime=0] - Time given in milliseconds (1000 = 1 sec). If set the speed is adjusted so the object will arrive at destination in the given number of ms.\r\n     *\r\n     * @return {number} The angle (in radians) that the object should be visually set to in order to match its new velocity.\r\n     */\r\n    moveTo: function (gameObject, x, y, speed, maxTime)\r\n    {\r\n        if (speed === undefined) { speed = 60; }\r\n        if (maxTime === undefined) { maxTime = 0; }\r\n\r\n        var angle = Math.atan2(y - gameObject.y, x - gameObject.x);\r\n\r\n        if (maxTime > 0)\r\n        {\r\n            //  We know how many pixels we need to move, but how fast?\r\n            speed = DistanceBetween(gameObject.x, gameObject.y, x, y) / (maxTime / 1000);\r\n        }\r\n\r\n        gameObject.body.velocity.setToPolar(angle, speed);\r\n\r\n        return angle;\r\n    },\r\n\r\n    /**\r\n     * Move the given display object towards the destination object at a steady velocity.\r\n     * If you specify a maxTime then it will adjust the speed (overwriting what you set) so it arrives at the destination in that number of seconds.\r\n     * Timings are approximate due to the way browser timers work. Allow for a variance of +- 50ms.\r\n     * Note: The display object does not continuously track the target. If the target changes location during transit the display object will not modify its course.\r\n     * Note: The display object doesn't stop moving once it reaches the destination coordinates.\r\n     * Note: Doesn't take into account acceleration, maxVelocity or drag (if you've set drag or acceleration too high this object may not move at all)\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#moveToObject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - Any Game Object with an Arcade Physics body.\r\n     * @param {object} destination - Any object with public `x` and `y` properties, such as a Game Object or Geometry object.\r\n     * @param {number} [speed=60] - The speed it will move, in pixels per second (default is 60 pixels/sec)\r\n     * @param {number} [maxTime=0] - Time given in milliseconds (1000 = 1 sec). If set the speed is adjusted so the object will arrive at destination in the given number of ms.\r\n     *\r\n     * @return {number} The angle (in radians) that the object should be visually set to in order to match its new velocity.\r\n     */\r\n    moveToObject: function (gameObject, destination, speed, maxTime)\r\n    {\r\n        return this.moveTo(gameObject, destination.x, destination.y, speed, maxTime);\r\n    },\r\n\r\n    /**\r\n     * Given the angle (in degrees) and speed calculate the velocity and return it as a vector, or set it to the given vector object.\r\n     * One way to use this is: velocityFromAngle(angle, 200, sprite.body.velocity) which will set the values directly to the sprite's velocity and not create a new vector object.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#velocityFromAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} angle - The angle in degrees calculated in clockwise positive direction (down = 90 degrees positive, right = 0 degrees positive, up = 90 degrees negative)\r\n     * @param {number} [speed=60] - The speed it will move, in pixels per second squared.\r\n     * @param {Phaser.Math.Vector2} [vec2] - The Vector2 in which the x and y properties will be set to the calculated velocity.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The Vector2 that stores the velocity.\r\n     */\r\n    velocityFromAngle: function (angle, speed, vec2)\r\n    {\r\n        if (speed === undefined) { speed = 60; }\r\n        if (vec2 === undefined) { vec2 = new Vector2(); }\r\n\r\n        return vec2.setToPolar(DegToRad(angle), speed);\r\n    },\r\n\r\n    /**\r\n     * Given the rotation (in radians) and speed calculate the velocity and return it as a vector, or set it to the given vector object.\r\n     * One way to use this is: velocityFromRotation(rotation, 200, sprite.body.velocity) which will set the values directly to the sprite's velocity and not create a new vector object.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#velocityFromRotation\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rotation - The angle in radians.\r\n     * @param {number} [speed=60] - The speed it will move, in pixels per second squared\r\n     * @param {Phaser.Math.Vector2} [vec2] - The Vector2 in which the x and y properties will be set to the calculated velocity.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The Vector2 that stores the velocity.\r\n     */\r\n    velocityFromRotation: function (rotation, speed, vec2)\r\n    {\r\n        if (speed === undefined) { speed = 60; }\r\n        if (vec2 === undefined) { vec2 = new Vector2(); }\r\n\r\n        return vec2.setToPolar(rotation, speed);\r\n    },\r\n\r\n    /**\r\n     * This method will search the given rectangular area and return an array of all physics bodies that\r\n     * overlap with it. It can return either Dynamic, Static bodies or a mixture of both.\r\n     *\r\n     * A body only has to intersect with the search area to be considered, it doesn't have to be fully\r\n     * contained within it.\r\n     *\r\n     * If Arcade Physics is set to use the RTree (which it is by default) then the search for is extremely fast,\r\n     * otherwise the search is O(N) for Dynamic Bodies.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#overlapRect\r\n     * @since 3.17.0\r\n     *\r\n     * @param {number} x - The top-left x coordinate of the area to search within.\r\n     * @param {number} y - The top-left y coordinate of the area to search within.\r\n     * @param {number} width - The width of the area to search within.\r\n     * @param {number} height - The height of the area to search within.\r\n     * @param {boolean} [includeDynamic=true] - Should the search include Dynamic Bodies?\r\n     * @param {boolean} [includeStatic=false] - Should the search include Static Bodies?\r\n     *\r\n     * @return {(Phaser.Physics.Arcade.Body[]|Phaser.Physics.Arcade.StaticBody[])} An array of bodies that overlap with the given area.\r\n     */\r\n    overlapRect: function (x, y, width, height, includeDynamic, includeStatic)\r\n    {\r\n        return OverlapRect(this.world, x, y, width, height, includeDynamic, includeStatic);\r\n    },\r\n\r\n    /**\r\n     * This method will search the given circular area and return an array of all physics bodies that\r\n     * overlap with it. It can return either Dynamic, Static bodies or a mixture of both.\r\n     *\r\n     * A body only has to intersect with the search area to be considered, it doesn't have to be fully\r\n     * contained within it.\r\n     *\r\n     * If Arcade Physics is set to use the RTree (which it is by default) then the search is rather fast,\r\n     * otherwise the search is O(N) for Dynamic Bodies.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#overlapCirc\r\n     * @since 3.21.0\r\n     *\r\n     * @param {number} x - The x coordinate of the center of the area to search within.\r\n     * @param {number} y - The y coordinate of the center of the area to search within.\r\n     * @param {number} radius - The radius of the area to search within.\r\n     * @param {boolean} [includeDynamic=true] - Should the search include Dynamic Bodies?\r\n     * @param {boolean} [includeStatic=false] - Should the search include Static Bodies?\r\n     *\r\n     * @return {(Phaser.Physics.Arcade.Body[]|Phaser.Physics.Arcade.StaticBody[])} An array of bodies that overlap with the given area.\r\n     */\r\n    overlapCirc: function (x, y, radius, includeDynamic, includeStatic)\r\n    {\r\n        return OverlapCirc(this.world, x, y, radius, includeDynamic, includeStatic);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#shutdown\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        if (!this.world)\r\n        {\r\n            //  Already destroyed\r\n            return;\r\n        }\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off(SceneEvents.UPDATE, this.world.update, this.world);\r\n        eventEmitter.off(SceneEvents.POST_UPDATE, this.world.postUpdate, this.world);\r\n        eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n\r\n        this.add.destroy();\r\n        this.world.destroy();\r\n\r\n        this.add = null;\r\n        this.world = null;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off(SceneEvents.START, this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('ArcadePhysics', ArcadePhysics, 'arcadePhysics');\r\n\r\nmodule.exports = ArcadePhysics;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}}],"sources":{"../node_modules/phaser/src/physics/arcade/ArcadePhysics.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar DegToRad = require('../../math/DegToRad');\r\nvar DistanceBetween = require('../../math/distance/DistanceBetween');\r\nvar DistanceSquared = require('../../math/distance/DistanceSquared');\r\nvar Factory = require('./Factory');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Merge = require('../../utils/object/Merge');\r\nvar OverlapCirc = require('./components/OverlapCirc');\r\nvar OverlapRect = require('./components/OverlapRect');\r\nvar PluginCache = require('../../plugins/PluginCache');\r\nvar SceneEvents = require('../../scene/events');\r\nvar Vector2 = require('../../math/Vector2');\r\nvar World = require('./World');\r\n\r\n/**\r\n * @classdesc\r\n * The Arcade Physics Plugin belongs to a Scene and sets up and manages the Scene's physics simulation.\r\n * It also holds some useful methods for moving and rotating Arcade Physics Bodies.\r\n *\r\n * You can access it from within a Scene using `this.physics`.\r\n *\r\n * Arcade Physics uses the Projection Method of collision resolution and separation. While it's fast and suitable\r\n * for 'arcade' style games it lacks stability when multiple objects are in close proximity or resting upon each other.\r\n * The separation that stops two objects penetrating may create a new penetration against a different object. If you\r\n * require a high level of stability please consider using an alternative physics system, such as Matter.js.\r\n *\r\n * @class ArcadePhysics\r\n * @memberof Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene that this Plugin belongs to.\r\n */\r\nvar ArcadePhysics = new Class({\r\n\r\n    initialize:\r\n\r\n    function ArcadePhysics (scene)\r\n    {\r\n        /**\r\n         * The Scene that this Plugin belongs to.\r\n         *\r\n         * @name Phaser.Physics.Arcade.ArcadePhysics#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * The Scene's Systems.\r\n         *\r\n         * @name Phaser.Physics.Arcade.ArcadePhysics#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * A configuration object. Union of the `physics.arcade.*` properties of the GameConfig and SceneConfig objects.\r\n         *\r\n         * @name Phaser.Physics.Arcade.ArcadePhysics#config\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.config = this.getConfig();\r\n\r\n        /**\r\n         * The physics simulation.\r\n         *\r\n         * @name Phaser.Physics.Arcade.ArcadePhysics#world\r\n         * @type {Phaser.Physics.Arcade.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world;\r\n\r\n        /**\r\n         * An object holding the Arcade Physics factory methods.\r\n         *\r\n         * @name Phaser.Physics.Arcade.ArcadePhysics#add\r\n         * @type {Phaser.Physics.Arcade.Factory}\r\n         * @since 3.0.0\r\n         */\r\n        this.add;\r\n\r\n        scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\r\n        scene.sys.events.on(SceneEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.world = new World(this.scene, this.config);\r\n        this.add = new Factory(this.world);\r\n\r\n        this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (!this.world)\r\n        {\r\n            this.world = new World(this.scene, this.config);\r\n            this.add = new Factory(this.world);\r\n        }\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on(SceneEvents.UPDATE, this.world.update, this.world);\r\n        eventEmitter.on(SceneEvents.POST_UPDATE, this.world.postUpdate, this.world);\r\n        eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * Creates the physics configuration for the current Scene.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#getConfig\r\n     * @since 3.0.0\r\n     *\r\n     * @return {object} The physics configuration.\r\n     */\r\n    getConfig: function ()\r\n    {\r\n        var gameConfig = this.systems.game.config.physics;\r\n        var sceneConfig = this.systems.settings.physics;\r\n\r\n        var config = Merge(\r\n            GetFastValue(sceneConfig, 'arcade', {}),\r\n            GetFastValue(gameConfig, 'arcade', {})\r\n        );\r\n\r\n        return config;\r\n    },\r\n\r\n    /**\r\n     * Tests if Game Objects overlap. See {@link Phaser.Physics.Arcade.World#overlap}\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#overlap\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object1 - The first object or array of objects to check.\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} [object2] - The second object or array of objects to check, or `undefined`.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they overlap. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {*} [callbackContext] - The context in which to run the callbacks.\r\n     *\r\n     * @return {boolean} True if at least one Game Object overlaps another.\r\n     *\r\n     * @see Phaser.Physics.Arcade.World#overlap\r\n     */\r\n    overlap: function (object1, object2, overlapCallback, processCallback, callbackContext)\r\n    {\r\n        if (overlapCallback === undefined) { overlapCallback = null; }\r\n        if (processCallback === undefined) { processCallback = null; }\r\n        if (callbackContext === undefined) { callbackContext = overlapCallback; }\r\n\r\n        return this.world.collideObjects(object1, object2, overlapCallback, processCallback, callbackContext, true);\r\n    },\r\n\r\n    /**\r\n     * Performs a collision check and separation between the two physics enabled objects given, which can be single\r\n     * Game Objects, arrays of Game Objects, Physics Groups, arrays of Physics Groups or normal Groups.\r\n     *\r\n     * If you don't require separation then use {@link #overlap} instead.\r\n     *\r\n     * If two Groups or arrays are passed, each member of one will be tested against each member of the other.\r\n     *\r\n     * If **only** one Group is passed (as `object1`), each member of the Group will be collided against the other members.\r\n     *\r\n     * If **only** one Array is passed, the array is iterated and every element in it is tested against the others.\r\n     *\r\n     * Two callbacks can be provided. The `collideCallback` is invoked if a collision occurs and the two colliding\r\n     * objects are passed to it.\r\n     *\r\n     * Arcade Physics uses the Projection Method of collision resolution and separation. While it's fast and suitable\r\n     * for 'arcade' style games it lacks stability when multiple objects are in close proximity or resting upon each other.\r\n     * The separation that stops two objects penetrating may create a new penetration against a different object. If you\r\n     * require a high level of stability please consider using an alternative physics system, such as Matter.js.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#collide\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object1 - The first object or array of objects to check.\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} [object2] - The second object or array of objects to check, or `undefined`.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {*} [callbackContext] - The context in which to run the callbacks.\r\n     *\r\n     * @return {boolean} True if any overlapping Game Objects were separated, otherwise false.\r\n     *\r\n     * @see Phaser.Physics.Arcade.World#collide\r\n     */\r\n    collide: function (object1, object2, collideCallback, processCallback, callbackContext)\r\n    {\r\n        if (collideCallback === undefined) { collideCallback = null; }\r\n        if (processCallback === undefined) { processCallback = null; }\r\n        if (callbackContext === undefined) { callbackContext = collideCallback; }\r\n\r\n        return this.world.collideObjects(object1, object2, collideCallback, processCallback, callbackContext, false);\r\n    },\r\n\r\n    /**\r\n     * This advanced method is specifically for testing for collision between a single Sprite and an array of Tile objects.\r\n     *\r\n     * You should generally use the `collide` method instead, with a Sprite vs. a Tilemap Layer, as that will perform\r\n     * tile filtering and culling for you, as well as handle the interesting face collision automatically.\r\n     *\r\n     * This method is offered for those who would like to check for collision with specific Tiles in a layer, without\r\n     * having to set any collision attributes on the tiles in question. This allows you to perform quick dynamic collisions\r\n     * on small sets of Tiles. As such, no culling or checks are made to the array of Tiles given to this method,\r\n     * you should filter them before passing them to this method.\r\n     *\r\n     * Important: Use of this method skips the `interesting faces` system that Tilemap Layers use. This means if you have\r\n     * say a row or column of tiles, and you jump into, or walk over them, it's possible to get stuck on the edges of the\r\n     * tiles as the interesting face calculations are skipped. However, for quick-fire small collision set tests on\r\n     * dynamic maps, this method can prove very useful.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#collideTiles\r\n     * @fires Phaser.Physics.Arcade.Events#TILE_COLLIDE\r\n     * @since 3.17.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} sprite - The first object to check for collision.\r\n     * @param {Phaser.Tilemaps.Tile[]} tiles - An array of Tiles to check for collision against.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {any} [callbackContext] - The context in which to run the callbacks.\r\n     *\r\n     * @return {boolean} True if any objects overlap (with `overlapOnly`); or true if any overlapping objects were separated.\r\n     */\r\n    collideTiles: function (sprite, tiles, collideCallback, processCallback, callbackContext)\r\n    {\r\n        return this.world.collideTiles(sprite, tiles, collideCallback, processCallback, callbackContext);\r\n    },\r\n\r\n    /**\r\n     * This advanced method is specifically for testing for overlaps between a single Sprite and an array of Tile objects.\r\n     *\r\n     * You should generally use the `overlap` method instead, with a Sprite vs. a Tilemap Layer, as that will perform\r\n     * tile filtering and culling for you, as well as handle the interesting face collision automatically.\r\n     *\r\n     * This method is offered for those who would like to check for overlaps with specific Tiles in a layer, without\r\n     * having to set any collision attributes on the tiles in question. This allows you to perform quick dynamic overlap\r\n     * tests on small sets of Tiles. As such, no culling or checks are made to the array of Tiles given to this method,\r\n     * you should filter them before passing them to this method.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#overlapTiles\r\n     * @fires Phaser.Physics.Arcade.Events#TILE_OVERLAP\r\n     * @since 3.17.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} sprite - The first object to check for collision.\r\n     * @param {Phaser.Tilemaps.Tile[]} tiles - An array of Tiles to check for collision against.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects overlap.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {any} [callbackContext] - The context in which to run the callbacks.\r\n     *\r\n     * @return {boolean} True if any objects overlap (with `overlapOnly`); or true if any overlapping objects were separated.\r\n     */\r\n    overlapTiles: function (sprite, tiles, collideCallback, processCallback, callbackContext)\r\n    {\r\n        return this.world.overlapTiles(sprite, tiles, collideCallback, processCallback, callbackContext);\r\n    },\r\n\r\n    /**\r\n     * Pauses the simulation.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Arcade.World} The simulation.\r\n     */\r\n    pause: function ()\r\n    {\r\n        return this.world.pause();\r\n    },\r\n\r\n    /**\r\n     * Resumes the simulation (if paused).\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Arcade.World} The simulation.\r\n     */\r\n    resume: function ()\r\n    {\r\n        return this.world.resume();\r\n    },\r\n\r\n    /**\r\n     * Sets the acceleration.x/y property on the game object so it will move towards the x/y coordinates at the given rate (in pixels per second squared)\r\n     *\r\n     * You must give a maximum speed value, beyond which the game object won't go any faster.\r\n     *\r\n     * Note: The game object does not continuously track the target. If the target changes location during transit the game object will not modify its course.\r\n     * Note: The game object doesn't stop moving once it reaches the destination coordinates.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#accelerateTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - Any Game Object with an Arcade Physics body.\r\n     * @param {number} x - The x coordinate to accelerate towards.\r\n     * @param {number} y - The y coordinate to accelerate towards.\r\n     * @param {number} [speed=60] - The acceleration (change in speed) in pixels per second squared.\r\n     * @param {number} [xSpeedMax=500] - The maximum x velocity the game object can reach.\r\n     * @param {number} [ySpeedMax=500] - The maximum y velocity the game object can reach.\r\n     *\r\n     * @return {number} The angle (in radians) that the object should be visually set to in order to match its new velocity.\r\n     */\r\n    accelerateTo: function (gameObject, x, y, speed, xSpeedMax, ySpeedMax)\r\n    {\r\n        if (speed === undefined) { speed = 60; }\r\n\r\n        var angle = Math.atan2(y - gameObject.y, x - gameObject.x);\r\n\r\n        gameObject.body.acceleration.setToPolar(angle, speed);\r\n\r\n        if (xSpeedMax !== undefined && ySpeedMax !== undefined)\r\n        {\r\n            gameObject.body.maxVelocity.set(xSpeedMax, ySpeedMax);\r\n        }\r\n\r\n        return angle;\r\n    },\r\n\r\n    /**\r\n     * Sets the acceleration.x/y property on the game object so it will move towards the x/y coordinates at the given rate (in pixels per second squared)\r\n     *\r\n     * You must give a maximum speed value, beyond which the game object won't go any faster.\r\n     *\r\n     * Note: The game object does not continuously track the target. If the target changes location during transit the game object will not modify its course.\r\n     * Note: The game object doesn't stop moving once it reaches the destination coordinates.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#accelerateToObject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - Any Game Object with an Arcade Physics body.\r\n     * @param {Phaser.GameObjects.GameObject} destination - The Game Object to move towards. Can be any object but must have visible x/y properties.\r\n     * @param {number} [speed=60] - The acceleration (change in speed) in pixels per second squared.\r\n     * @param {number} [xSpeedMax=500] - The maximum x velocity the game object can reach.\r\n     * @param {number} [ySpeedMax=500] - The maximum y velocity the game object can reach.\r\n     *\r\n     * @return {number} The angle (in radians) that the object should be visually set to in order to match its new velocity.\r\n     */\r\n    accelerateToObject: function (gameObject, destination, speed, xSpeedMax, ySpeedMax)\r\n    {\r\n        return this.accelerateTo(gameObject, destination.x, destination.y, speed, xSpeedMax, ySpeedMax);\r\n    },\r\n\r\n    /**\r\n     * Finds the Body or Game Object closest to a source point or object.\r\n     *\r\n     * If a `targets` argument is passed, this method finds the closest of those.\r\n     * The targets can be Arcade Physics Game Objects, Dynamic Bodies, or Static Bodies.\r\n     *\r\n     * If no `targets` argument is passed, this method finds the closest Dynamic Body.\r\n     *\r\n     * If two or more targets are the exact same distance from the source point, only the first target\r\n     * is returned.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#closest\r\n     * @since 3.0.0\r\n     *\r\n     * @param {any} source - Any object with public `x` and `y` properties, such as a Game Object or Geometry object.\r\n     * @param {(Phaser.Physics.Arcade.Body[]|Phaser.Physics.Arcade.StaticBody[]|Phaser.GameObjects.GameObject[])} [targets] - The targets.\r\n     *\r\n     * @return {?(Phaser.Physics.Arcade.Body|Phaser.Physics.Arcade.StaticBody|Phaser.GameObjects.GameObject)} The target closest to the given source point.\r\n     */\r\n    closest: function (source, targets)\r\n    {\r\n        if (!targets)\r\n        {\r\n            targets = this.world.bodies.entries;\r\n        }\r\n\r\n        var min = Number.MAX_VALUE;\r\n        var closest = null;\r\n        var x = source.x;\r\n        var y = source.y;\r\n        var len = targets.length;\r\n\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            var target = targets[i];\r\n            var body = target.body || target;\r\n\r\n            if (source === target || source === body || source === body.gameObject || source === body.center)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var distance = DistanceSquared(x, y, body.center.x, body.center.y);\r\n\r\n            if (distance < min)\r\n            {\r\n                closest = target;\r\n                min = distance;\r\n            }\r\n        }\r\n\r\n        return closest;\r\n    },\r\n\r\n    /**\r\n     * Finds the Body or Game Object farthest from a source point or object.\r\n     *\r\n     * If a `targets` argument is passed, this method finds the farthest of those.\r\n     * The targets can be Arcade Physics Game Objects, Dynamic Bodies, or Static Bodies.\r\n     *\r\n     * If no `targets` argument is passed, this method finds the farthest Dynamic Body.\r\n     *\r\n     * If two or more targets are the exact same distance from the source point, only the first target\r\n     * is returned.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#furthest\r\n     * @since 3.0.0\r\n     *\r\n     * @param {any} source - Any object with public `x` and `y` properties, such as a Game Object or Geometry object.\r\n     * @param {(Phaser.Physics.Arcade.Body[]|Phaser.Physics.Arcade.StaticBody[]|Phaser.GameObjects.GameObject[])} [targets] - The targets.\r\n     *\r\n     * @return {?(Phaser.Physics.Arcade.Body|Phaser.Physics.Arcade.StaticBody|Phaser.GameObjects.GameObject)} The target farthest from the given source point.\r\n     */\r\n    furthest: function (source, targets)\r\n    {\r\n        if (!targets)\r\n        {\r\n            targets = this.world.bodies.entries;\r\n        }\r\n\r\n        var max = -1;\r\n        var farthest = null;\r\n        var x = source.x;\r\n        var y = source.y;\r\n        var len = targets.length;\r\n\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            var target = targets[i];\r\n            var body = target.body || target;\r\n\r\n            if (source === target || source === body || source === body.gameObject || source === body.center)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var distance = DistanceSquared(x, y, body.center.x, body.center.y);\r\n\r\n            if (distance > max)\r\n            {\r\n                farthest = target;\r\n                max = distance;\r\n            }\r\n\r\n        }\r\n\r\n        return farthest;\r\n    },\r\n\r\n    /**\r\n     * Move the given display object towards the x/y coordinates at a steady velocity.\r\n     * If you specify a maxTime then it will adjust the speed (over-writing what you set) so it arrives at the destination in that number of seconds.\r\n     * Timings are approximate due to the way browser timers work. Allow for a variance of +- 50ms.\r\n     * Note: The display object does not continuously track the target. If the target changes location during transit the display object will not modify its course.\r\n     * Note: The display object doesn't stop moving once it reaches the destination coordinates.\r\n     * Note: Doesn't take into account acceleration, maxVelocity or drag (if you've set drag or acceleration too high this object may not move at all)\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#moveTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - Any Game Object with an Arcade Physics body.\r\n     * @param {number} x - The x coordinate to move towards.\r\n     * @param {number} y - The y coordinate to move towards.\r\n     * @param {number} [speed=60] - The speed it will move, in pixels per second (default is 60 pixels/sec)\r\n     * @param {number} [maxTime=0] - Time given in milliseconds (1000 = 1 sec). If set the speed is adjusted so the object will arrive at destination in the given number of ms.\r\n     *\r\n     * @return {number} The angle (in radians) that the object should be visually set to in order to match its new velocity.\r\n     */\r\n    moveTo: function (gameObject, x, y, speed, maxTime)\r\n    {\r\n        if (speed === undefined) { speed = 60; }\r\n        if (maxTime === undefined) { maxTime = 0; }\r\n\r\n        var angle = Math.atan2(y - gameObject.y, x - gameObject.x);\r\n\r\n        if (maxTime > 0)\r\n        {\r\n            //  We know how many pixels we need to move, but how fast?\r\n            speed = DistanceBetween(gameObject.x, gameObject.y, x, y) / (maxTime / 1000);\r\n        }\r\n\r\n        gameObject.body.velocity.setToPolar(angle, speed);\r\n\r\n        return angle;\r\n    },\r\n\r\n    /**\r\n     * Move the given display object towards the destination object at a steady velocity.\r\n     * If you specify a maxTime then it will adjust the speed (overwriting what you set) so it arrives at the destination in that number of seconds.\r\n     * Timings are approximate due to the way browser timers work. Allow for a variance of +- 50ms.\r\n     * Note: The display object does not continuously track the target. If the target changes location during transit the display object will not modify its course.\r\n     * Note: The display object doesn't stop moving once it reaches the destination coordinates.\r\n     * Note: Doesn't take into account acceleration, maxVelocity or drag (if you've set drag or acceleration too high this object may not move at all)\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#moveToObject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - Any Game Object with an Arcade Physics body.\r\n     * @param {object} destination - Any object with public `x` and `y` properties, such as a Game Object or Geometry object.\r\n     * @param {number} [speed=60] - The speed it will move, in pixels per second (default is 60 pixels/sec)\r\n     * @param {number} [maxTime=0] - Time given in milliseconds (1000 = 1 sec). If set the speed is adjusted so the object will arrive at destination in the given number of ms.\r\n     *\r\n     * @return {number} The angle (in radians) that the object should be visually set to in order to match its new velocity.\r\n     */\r\n    moveToObject: function (gameObject, destination, speed, maxTime)\r\n    {\r\n        return this.moveTo(gameObject, destination.x, destination.y, speed, maxTime);\r\n    },\r\n\r\n    /**\r\n     * Given the angle (in degrees) and speed calculate the velocity and return it as a vector, or set it to the given vector object.\r\n     * One way to use this is: velocityFromAngle(angle, 200, sprite.body.velocity) which will set the values directly to the sprite's velocity and not create a new vector object.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#velocityFromAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} angle - The angle in degrees calculated in clockwise positive direction (down = 90 degrees positive, right = 0 degrees positive, up = 90 degrees negative)\r\n     * @param {number} [speed=60] - The speed it will move, in pixels per second squared.\r\n     * @param {Phaser.Math.Vector2} [vec2] - The Vector2 in which the x and y properties will be set to the calculated velocity.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The Vector2 that stores the velocity.\r\n     */\r\n    velocityFromAngle: function (angle, speed, vec2)\r\n    {\r\n        if (speed === undefined) { speed = 60; }\r\n        if (vec2 === undefined) { vec2 = new Vector2(); }\r\n\r\n        return vec2.setToPolar(DegToRad(angle), speed);\r\n    },\r\n\r\n    /**\r\n     * Given the rotation (in radians) and speed calculate the velocity and return it as a vector, or set it to the given vector object.\r\n     * One way to use this is: velocityFromRotation(rotation, 200, sprite.body.velocity) which will set the values directly to the sprite's velocity and not create a new vector object.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#velocityFromRotation\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rotation - The angle in radians.\r\n     * @param {number} [speed=60] - The speed it will move, in pixels per second squared\r\n     * @param {Phaser.Math.Vector2} [vec2] - The Vector2 in which the x and y properties will be set to the calculated velocity.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The Vector2 that stores the velocity.\r\n     */\r\n    velocityFromRotation: function (rotation, speed, vec2)\r\n    {\r\n        if (speed === undefined) { speed = 60; }\r\n        if (vec2 === undefined) { vec2 = new Vector2(); }\r\n\r\n        return vec2.setToPolar(rotation, speed);\r\n    },\r\n\r\n    /**\r\n     * This method will search the given rectangular area and return an array of all physics bodies that\r\n     * overlap with it. It can return either Dynamic, Static bodies or a mixture of both.\r\n     *\r\n     * A body only has to intersect with the search area to be considered, it doesn't have to be fully\r\n     * contained within it.\r\n     *\r\n     * If Arcade Physics is set to use the RTree (which it is by default) then the search for is extremely fast,\r\n     * otherwise the search is O(N) for Dynamic Bodies.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#overlapRect\r\n     * @since 3.17.0\r\n     *\r\n     * @param {number} x - The top-left x coordinate of the area to search within.\r\n     * @param {number} y - The top-left y coordinate of the area to search within.\r\n     * @param {number} width - The width of the area to search within.\r\n     * @param {number} height - The height of the area to search within.\r\n     * @param {boolean} [includeDynamic=true] - Should the search include Dynamic Bodies?\r\n     * @param {boolean} [includeStatic=false] - Should the search include Static Bodies?\r\n     *\r\n     * @return {(Phaser.Physics.Arcade.Body[]|Phaser.Physics.Arcade.StaticBody[])} An array of bodies that overlap with the given area.\r\n     */\r\n    overlapRect: function (x, y, width, height, includeDynamic, includeStatic)\r\n    {\r\n        return OverlapRect(this.world, x, y, width, height, includeDynamic, includeStatic);\r\n    },\r\n\r\n    /**\r\n     * This method will search the given circular area and return an array of all physics bodies that\r\n     * overlap with it. It can return either Dynamic, Static bodies or a mixture of both.\r\n     *\r\n     * A body only has to intersect with the search area to be considered, it doesn't have to be fully\r\n     * contained within it.\r\n     *\r\n     * If Arcade Physics is set to use the RTree (which it is by default) then the search is rather fast,\r\n     * otherwise the search is O(N) for Dynamic Bodies.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#overlapCirc\r\n     * @since 3.21.0\r\n     *\r\n     * @param {number} x - The x coordinate of the center of the area to search within.\r\n     * @param {number} y - The y coordinate of the center of the area to search within.\r\n     * @param {number} radius - The radius of the area to search within.\r\n     * @param {boolean} [includeDynamic=true] - Should the search include Dynamic Bodies?\r\n     * @param {boolean} [includeStatic=false] - Should the search include Static Bodies?\r\n     *\r\n     * @return {(Phaser.Physics.Arcade.Body[]|Phaser.Physics.Arcade.StaticBody[])} An array of bodies that overlap with the given area.\r\n     */\r\n    overlapCirc: function (x, y, radius, includeDynamic, includeStatic)\r\n    {\r\n        return OverlapCirc(this.world, x, y, radius, includeDynamic, includeStatic);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#shutdown\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        if (!this.world)\r\n        {\r\n            //  Already destroyed\r\n            return;\r\n        }\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off(SceneEvents.UPDATE, this.world.update, this.world);\r\n        eventEmitter.off(SceneEvents.POST_UPDATE, this.world.postUpdate, this.world);\r\n        eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n\r\n        this.add.destroy();\r\n        this.world.destroy();\r\n\r\n        this.add = null;\r\n        this.world = null;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Physics.Arcade.ArcadePhysics#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off(SceneEvents.START, this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('ArcadePhysics', ArcadePhysics, 'arcadePhysics');\r\n\r\nmodule.exports = ArcadePhysics;\r\n"},"lineCount":684}},"error":null,"hash":"7ca5f57fd7e509b96c959519fdfbb606","cacheData":{"env":{}}}