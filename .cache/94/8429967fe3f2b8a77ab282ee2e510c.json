{"id":"zPSQ","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591200297000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000},{"name":"./GetTilesWithin","loc":{"line":7,"column":29},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/tilemaps/components/FindTile.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/tilemaps/components/GetTilesWithin.js"}],"generated":{"js":"var e=require(\"./GetTilesWithin\"),i=function(i,n,r,t,u,l,o,d){return e(r,t,u,l,o,d).find(i,n)||null};module.exports=i;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":7,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":7,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":7,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":7,"column":0},"generated":{"line":1,"column":14}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":42,"column":0},"generated":{"line":1,"column":34}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":42,"column":0},"generated":{"line":1,"column":36}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":42,"column":0},"generated":{"line":1,"column":45}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":42,"column":0},"generated":{"line":1,"column":47}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":42,"column":0},"generated":{"line":1,"column":49}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":42,"column":0},"generated":{"line":1,"column":51}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":42,"column":0},"generated":{"line":1,"column":53}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":42,"column":0},"generated":{"line":1,"column":55}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":42,"column":0},"generated":{"line":1,"column":57}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":42,"column":0},"generated":{"line":1,"column":59}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":45,"column":0},"generated":{"line":1,"column":62}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":44,"column":0},"generated":{"line":1,"column":69}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":44,"column":0},"generated":{"line":1,"column":71}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":44,"column":0},"generated":{"line":1,"column":73}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":44,"column":0},"generated":{"line":1,"column":75}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":44,"column":0},"generated":{"line":1,"column":77}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":44,"column":0},"generated":{"line":1,"column":79}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":44,"column":0},"generated":{"line":1,"column":81}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":45,"column":0},"generated":{"line":1,"column":84}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":45,"column":0},"generated":{"line":1,"column":89}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":45,"column":0},"generated":{"line":1,"column":91}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":45,"column":0},"generated":{"line":1,"column":95}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":48,"column":0},"generated":{"line":1,"column":101}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":48,"column":0},"generated":{"line":1,"column":108}},{"source":"../node_modules/phaser/src/tilemaps/components/FindTile.js","original":{"line":48,"column":0},"generated":{"line":1,"column":116}}],"sources":{"../node_modules/phaser/src/tilemaps/components/FindTile.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\n\r\n/**\r\n * @callback FindTileCallback\r\n *\r\n * @param {Phaser.Tilemaps.Tile} value - The Tile.\r\n * @param {integer} index - The index of the tile.\r\n * @param {Phaser.Tilemaps.Tile[]} array - An array of Tile objects.\r\n *\r\n * @return {boolean} Return `true` if the callback should run, otherwise `false`.\r\n */\r\n\r\n/**\r\n * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n * true. Similar to Array.prototype.find in vanilla JS.\r\n *\r\n * @function Phaser.Tilemaps.Components.FindTile\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {FindTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n * @param {object} [context] - The context under which the callback should be run.\r\n * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n *\r\n * @return {?Phaser.Tilemaps.Tile} A Tile that matches the search, or null if no Tile found\r\n */\r\nvar FindTile = function (callback, context, tileX, tileY, width, height, filteringOptions, layer)\r\n{\r\n    var tiles = GetTilesWithin(tileX, tileY, width, height, filteringOptions, layer);\r\n    return tiles.find(callback, context) || null;\r\n};\r\n\r\nmodule.exports = FindTile;\r\n"},"lineCount":null}},"error":null,"hash":"5ea86ebf802459a73665046501cd621f","cacheData":{"env":{}}}