{"id":"Cun0","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591200297000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000}],"generated":{"js":"var t={setDrag:function(t,r){return this.body.drag.set(t,r),this},setDragX:function(t){return this.body.drag.x=t,this},setDragY:function(t){return this.body.drag.y=t,this},setDamping:function(t){return this.body.useDamping=t,this}};module.exports=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":13,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":13,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":13,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":37,"column":0},"generated":{"line":1,"column":7}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":37,"column":0},"generated":{"line":1,"column":15}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":37,"column":0},"generated":{"line":1,"column":24}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":37,"column":0},"generated":{"line":1,"column":26}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":41,"column":0},"generated":{"line":1,"column":29}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":39,"column":0},"generated":{"line":1,"column":36}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":39,"column":0},"generated":{"line":1,"column":41}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":39,"column":0},"generated":{"line":1,"column":46}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":39,"column":0},"generated":{"line":1,"column":51}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":39,"column":0},"generated":{"line":1,"column":55}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":39,"column":0},"generated":{"line":1,"column":57}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":41,"column":0},"generated":{"line":1,"column":60}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":65,"column":0},"generated":{"line":1,"column":66}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":65,"column":0},"generated":{"line":1,"column":75}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":65,"column":0},"generated":{"line":1,"column":84}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":69,"column":0},"generated":{"line":1,"column":87}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":67,"column":0},"generated":{"line":1,"column":94}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":67,"column":0},"generated":{"line":1,"column":99}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":67,"column":0},"generated":{"line":1,"column":104}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":67,"column":0},"generated":{"line":1,"column":109}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":67,"column":0},"generated":{"line":1,"column":111}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":69,"column":0},"generated":{"line":1,"column":113}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":93,"column":0},"generated":{"line":1,"column":119}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":93,"column":0},"generated":{"line":1,"column":128}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":93,"column":0},"generated":{"line":1,"column":137}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":97,"column":0},"generated":{"line":1,"column":140}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":95,"column":0},"generated":{"line":1,"column":147}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":95,"column":0},"generated":{"line":1,"column":152}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":95,"column":0},"generated":{"line":1,"column":157}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":95,"column":0},"generated":{"line":1,"column":162}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":95,"column":0},"generated":{"line":1,"column":164}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":97,"column":0},"generated":{"line":1,"column":166}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":118,"column":0},"generated":{"line":1,"column":172}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":118,"column":0},"generated":{"line":1,"column":183}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":118,"column":0},"generated":{"line":1,"column":192}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":122,"column":0},"generated":{"line":1,"column":195}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":120,"column":0},"generated":{"line":1,"column":202}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":120,"column":0},"generated":{"line":1,"column":207}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":120,"column":0},"generated":{"line":1,"column":212}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":120,"column":0},"generated":{"line":1,"column":223}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":122,"column":0},"generated":{"line":1,"column":225}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":127,"column":0},"generated":{"line":1,"column":232}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":127,"column":0},"generated":{"line":1,"column":239}},{"source":"../node_modules/phaser/src/physics/arcade/components/Drag.js","original":{"line":127,"column":0},"generated":{"line":1,"column":247}}],"sources":{"../node_modules/phaser/src/physics/arcade/components/Drag.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Provides methods used for setting the drag properties of an Arcade Physics Body.\r\n *\r\n * @namespace Phaser.Physics.Arcade.Components.Drag\r\n * @since 3.0.0\r\n */\r\nvar Drag = {\r\n\r\n    /**\r\n     * Sets the body's horizontal and vertical drag. If the vertical drag value is not provided, the vertical drag is set to the same value as the horizontal drag.\r\n     *\r\n     * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\r\n     * It is the absolute loss of velocity due to movement, in pixels per second squared.\r\n     * The x and y components are applied separately.\r\n     *\r\n     * When `useDamping` is true, this is 1 minus the damping factor.\r\n     * A value of 1 means the Body loses no velocity.\r\n     * A value of 0.95 means the Body loses 5% of its velocity per step.\r\n     * A value of 0.5 means the Body loses 50% of its velocity per step.\r\n     *\r\n     * Drag is applied only when `acceleration` is zero.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Components.Drag#setDrag\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The amount of horizontal drag to apply.\r\n     * @param {number} [y=x] - The amount of vertical drag to apply.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setDrag: function (x, y)\r\n    {\r\n        this.body.drag.set(x, y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the body's horizontal drag.\r\n     *\r\n     * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\r\n     * It is the absolute loss of velocity due to movement, in pixels per second squared.\r\n     * The x and y components are applied separately.\r\n     *\r\n     * When `useDamping` is true, this is 1 minus the damping factor.\r\n     * A value of 1 means the Body loses no velocity.\r\n     * A value of 0.95 means the Body loses 5% of its velocity per step.\r\n     * A value of 0.5 means the Body loses 50% of its velocity per step.\r\n     *\r\n     * Drag is applied only when `acceleration` is zero.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Components.Drag#setDragX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The amount of horizontal drag to apply.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setDragX: function (value)\r\n    {\r\n        this.body.drag.x = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the body's vertical drag.\r\n     *\r\n     * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\r\n     * It is the absolute loss of velocity due to movement, in pixels per second squared.\r\n     * The x and y components are applied separately.\r\n     *\r\n     * When `useDamping` is true, this is 1 minus the damping factor.\r\n     * A value of 1 means the Body loses no velocity.\r\n     * A value of 0.95 means the Body loses 5% of its velocity per step.\r\n     * A value of 0.5 means the Body loses 50% of its velocity per step.\r\n     *\r\n     * Drag is applied only when `acceleration` is zero.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Components.Drag#setDragY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The amount of vertical drag to apply.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setDragY: function (value)\r\n    {\r\n        this.body.drag.y = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * If this Body is using `drag` for deceleration this function controls how the drag is applied.\r\n     * If set to `true` drag will use a damping effect rather than a linear approach. If you are\r\n     * creating a game where the Body moves freely at any angle (i.e. like the way the ship moves in\r\n     * the game Asteroids) then you will get a far smoother and more visually correct deceleration\r\n     * by using damping, avoiding the axis-drift that is prone with linear deceleration.\r\n     *\r\n     * If you enable this property then you should use far smaller `drag` values than with linear, as\r\n     * they are used as a multiplier on the velocity. Values such as 0.95 will give a nice slow\r\n     * deceleration, where-as smaller values, such as 0.5 will stop an object almost immediately.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Components.Drag#setDamping\r\n     * @since 3.10.0\r\n     *\r\n     * @param {boolean} value - `true` to use damping for deceleration, or `false` to use linear deceleration.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setDamping: function (value)\r\n    {\r\n        this.body.useDamping = value;\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Drag;\r\n"},"lineCount":null}},"error":null,"hash":"15900b3331084848cc379aff7fcebaa8","cacheData":{"env":{}}}