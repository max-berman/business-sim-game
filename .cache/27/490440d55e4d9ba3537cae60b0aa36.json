{"id":"Q10R","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591200297000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000}],"generated":{"js":"var r=function(r,e,n){return r<=e?0:r>=n?1:(r=(r-e)/(n-e))*r*(3-2*r)};module.exports=r;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":24,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":24,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":24,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":24,"column":0},"generated":{"line":1,"column":15}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":24,"column":0},"generated":{"line":1,"column":17}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":24,"column":0},"generated":{"line":1,"column":19}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":26,"column":0},"generated":{"line":1,"column":22}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":26,"column":0},"generated":{"line":1,"column":29}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":26,"column":0},"generated":{"line":1,"column":32}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":28,"column":0},"generated":{"line":1,"column":34}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":31,"column":0},"generated":{"line":1,"column":36}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":31,"column":0},"generated":{"line":1,"column":39}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":33,"column":0},"generated":{"line":1,"column":41}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":36,"column":0},"generated":{"line":1,"column":44}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":36,"column":0},"generated":{"line":1,"column":47}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":36,"column":0},"generated":{"line":1,"column":49}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":36,"column":0},"generated":{"line":1,"column":53}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":36,"column":0},"generated":{"line":1,"column":55}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":38,"column":0},"generated":{"line":1,"column":59}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":38,"column":0},"generated":{"line":1,"column":62}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":38,"column":0},"generated":{"line":1,"column":64}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":38,"column":0},"generated":{"line":1,"column":66}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":41,"column":0},"generated":{"line":1,"column":70}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":41,"column":0},"generated":{"line":1,"column":77}},{"source":"../node_modules/phaser/src/math/SmoothStep.js","original":{"line":41,"column":0},"generated":{"line":1,"column":85}}],"sources":{"../node_modules/phaser/src/math/SmoothStep.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Calculate a smooth interpolation percentage of `x` between `min` and `max`.\r\n *\r\n * The function receives the number `x` as an argument and returns 0 if `x` is less than or equal to the left edge,\r\n * 1 if `x` is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial,\r\n * between 0 and 1 otherwise.\r\n *\r\n * @function Phaser.Math.SmoothStep\r\n * @since 3.0.0\r\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep}\r\n *\r\n * @param {number} x - The input value.\r\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\r\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\r\n *\r\n * @return {number} The percentage of interpolation, between 0 and 1.\r\n */\r\nvar SmoothStep = function (x, min, max)\r\n{\r\n    if (x <= min)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    if (x >= max)\r\n    {\r\n        return 1;\r\n    }\r\n\r\n    x = (x - min) / (max - min);\r\n\r\n    return x * x * (3 - 2 * x);\r\n};\r\n\r\nmodule.exports = SmoothStep;\r\n"},"lineCount":null}},"error":null,"hash":"6410b2844acee49af03e4fdd65f4880b","cacheData":{"env":{}}}