{"id":"aZQm","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591200297000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000},{"name":"../../GameObjectFactory","loc":{"line":7,"column":32},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/GameObjectFactory.js"},{"name":"./Grid","loc":{"line":8,"column":19},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/shape/grid/Grid.js"}],"generated":{"js":"var e=require(\"../../GameObjectFactory\"),r=require(\"./Grid\");e.register(\"grid\",function(e,i,t,s,a,d,n,c,u,g){return this.displayList.add(new r(this.scene,e,i,t,s,a,d,n,c,u,g))});"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":7,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":7,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":7,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":7,"column":0},"generated":{"line":1,"column":14}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":8,"column":0},"generated":{"line":1,"column":41}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":8,"column":0},"generated":{"line":1,"column":43}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":8,"column":0},"generated":{"line":1,"column":51}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":46,"column":0},"generated":{"line":1,"column":61}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":46,"column":0},"generated":{"line":1,"column":63}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":46,"column":0},"generated":{"line":1,"column":72}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":46,"column":0},"generated":{"line":1,"column":79}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":46,"column":0},"generated":{"line":1,"column":88}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":46,"column":0},"generated":{"line":1,"column":90}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":46,"column":0},"generated":{"line":1,"column":92}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":46,"column":0},"generated":{"line":1,"column":94}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":46,"column":0},"generated":{"line":1,"column":96}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":46,"column":0},"generated":{"line":1,"column":98}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":46,"column":0},"generated":{"line":1,"column":100}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":46,"column":0},"generated":{"line":1,"column":102}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":46,"column":0},"generated":{"line":1,"column":104}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":46,"column":0},"generated":{"line":1,"column":106}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":109}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":116}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":121}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":133}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":137}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":141}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":143}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":148}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":154}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":156}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":158}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":160}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":162}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":164}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":166}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":168}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":170}},{"source":"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js","original":{"line":48,"column":0},"generated":{"line":1,"column":172}}],"sources":{"../node_modules/phaser/src/gameobjects/shape/grid/GridFactory.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GameObjectFactory = require('../../GameObjectFactory');\r\nvar Grid = require('./Grid');\r\n\r\n/**\r\n * Creates a new Grid Shape Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the Grid Game Object has been built into Phaser.\r\n * \r\n * The Grid Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports only fill colors and cannot be stroked.\r\n * \r\n * A Grid Shape allows you to display a grid in your game, where you can control the size of the\r\n * grid as well as the width and height of the grid cells. You can set a fill color for each grid\r\n * cell as well as an alternate fill color. When the alternate fill color is set then the grid\r\n * cells will alternate the fill colors as they render, creating a chess-board effect. You can\r\n * also optionally have an outline fill color. If set, this draws lines between the grid cells\r\n * in the given color. If you specify an outline color with an alpha of zero, then it will draw\r\n * the cells spaced out, but without the lines between them.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#grid\r\n * @since 3.13.0\r\n *\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [width=128] - The width of the grid.\r\n * @param {number} [height=128] - The height of the grid.\r\n * @param {number} [cellWidth=32] - The width of one cell in the grid.\r\n * @param {number} [cellHeight=32] - The height of one cell in the grid.\r\n * @param {number} [fillColor] - The color the grid cells will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the grid cells will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n * @param {number} [outlineFillColor] - The color of the lines between the grid cells.\r\n * @param {number} [outlineFillAlpha] - The alpha of the lines between the grid cells.\r\n *\r\n * @return {Phaser.GameObjects.Grid} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('grid', function (x, y, width, height, cellWidth, cellHeight, fillColor, fillAlpha, outlineFillColor, outlineFillAlpha)\r\n{\r\n    return this.displayList.add(new Grid(this.scene, x, y, width, height, cellWidth, cellHeight, fillColor, fillAlpha, outlineFillColor, outlineFillAlpha));\r\n});\r\n"},"lineCount":null}},"error":null,"hash":"0d7e4b99c2c7bfeb266308527d832283","cacheData":{"env":{}}}