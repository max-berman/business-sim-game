{"id":"eCA1","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591200297000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000}],"generated":{"js":"var t=function(t,a,n){return Math.max(a,Math.min(n,t))};module.exports=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":19,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":19,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":19,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":19,"column":0},"generated":{"line":1,"column":15}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":19,"column":0},"generated":{"line":1,"column":17}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":19,"column":0},"generated":{"line":1,"column":19}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":21,"column":0},"generated":{"line":1,"column":22}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":21,"column":0},"generated":{"line":1,"column":29}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":21,"column":0},"generated":{"line":1,"column":34}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":21,"column":0},"generated":{"line":1,"column":38}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":21,"column":0},"generated":{"line":1,"column":40}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":21,"column":0},"generated":{"line":1,"column":45}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":21,"column":0},"generated":{"line":1,"column":49}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":21,"column":0},"generated":{"line":1,"column":51}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":24,"column":0},"generated":{"line":1,"column":56}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":24,"column":0},"generated":{"line":1,"column":63}},{"source":"../node_modules/phaser/src/math/Clamp.js","original":{"line":24,"column":0},"generated":{"line":1,"column":71}}],"sources":{"../node_modules/phaser/src/math/Clamp.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Force a value within the boundaries by clamping it to the range `min`, `max`.\r\n *\r\n * @function Phaser.Math.Clamp\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to be clamped.\r\n * @param {number} min - The minimum bounds.\r\n * @param {number} max - The maximum bounds.\r\n *\r\n * @return {number} The clamped value.\r\n */\r\nvar Clamp = function (value, min, max)\r\n{\r\n    return Math.max(min, Math.min(max, value));\r\n};\r\n\r\nmodule.exports = Clamp;\r\n"},"lineCount":null}},"error":null,"hash":"8662af8e84d57accce1228af2b065583","cacheData":{"env":{}}}