{"id":"cJnt","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591200297000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000},{"name":"./Ellipse","loc":{"line":7,"column":22},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/shape/ellipse/Ellipse.js"},{"name":"../../GameObjectFactory","loc":{"line":8,"column":32},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/GameObjectFactory.js"}],"generated":{"js":"var e=require(\"./Ellipse\"),i=require(\"../../GameObjectFactory\");i.register(\"ellipse\",function(i,r,s,t,a,l){return this.displayList.add(new e(this.scene,i,r,s,t,a,l))});"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":7,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":7,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":7,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":7,"column":0},"generated":{"line":1,"column":14}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":8,"column":0},"generated":{"line":1,"column":27}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":8,"column":0},"generated":{"line":1,"column":29}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":8,"column":0},"generated":{"line":1,"column":37}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":43,"column":0},"generated":{"line":1,"column":64}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":43,"column":0},"generated":{"line":1,"column":66}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":43,"column":0},"generated":{"line":1,"column":75}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":43,"column":0},"generated":{"line":1,"column":85}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":43,"column":0},"generated":{"line":1,"column":94}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":43,"column":0},"generated":{"line":1,"column":96}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":43,"column":0},"generated":{"line":1,"column":98}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":43,"column":0},"generated":{"line":1,"column":100}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":43,"column":0},"generated":{"line":1,"column":102}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":43,"column":0},"generated":{"line":1,"column":104}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":45,"column":0},"generated":{"line":1,"column":107}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":45,"column":0},"generated":{"line":1,"column":114}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":45,"column":0},"generated":{"line":1,"column":119}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":45,"column":0},"generated":{"line":1,"column":131}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":45,"column":0},"generated":{"line":1,"column":135}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":45,"column":0},"generated":{"line":1,"column":139}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":45,"column":0},"generated":{"line":1,"column":141}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":45,"column":0},"generated":{"line":1,"column":146}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":45,"column":0},"generated":{"line":1,"column":152}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":45,"column":0},"generated":{"line":1,"column":154}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":45,"column":0},"generated":{"line":1,"column":156}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":45,"column":0},"generated":{"line":1,"column":158}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":45,"column":0},"generated":{"line":1,"column":160}},{"source":"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js","original":{"line":45,"column":0},"generated":{"line":1,"column":162}}],"sources":{"../node_modules/phaser/src/gameobjects/shape/ellipse/EllipseFactory.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Ellipse = require('./Ellipse');\r\nvar GameObjectFactory = require('../../GameObjectFactory');\r\n\r\n/**\r\n * Creates a new Ellipse Shape Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the Ellipse Game Object has been built into Phaser.\r\n * \r\n * The Ellipse Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * When it renders it displays an ellipse shape. You can control the width and height of the ellipse.\r\n * If the width and height match it will render as a circle. If the width is less than the height,\r\n * it will look more like an egg shape.\r\n * \r\n * The Ellipse shape also has a `smoothness` property and corresponding `setSmoothness` method.\r\n * This allows you to control how smooth the shape renders in WebGL, by controlling the number of iterations\r\n * that take place during construction. Increase and decrease the default value for smoother, or more\r\n * jagged, shapes.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#ellipse\r\n * @since 3.13.0\r\n *\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [width=128] - The width of the ellipse. An ellipse with equal width and height renders as a circle.\r\n * @param {number} [height=128] - The height of the ellipse. An ellipse with equal width and height renders as a circle.\r\n * @param {number} [fillColor] - The color the ellipse will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the ellipse will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n *\r\n * @return {Phaser.GameObjects.Ellipse} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('ellipse', function (x, y, width, height, fillColor, fillAlpha)\r\n{\r\n    return this.displayList.add(new Ellipse(this.scene, x, y, width, height, fillColor, fillAlpha));\r\n});\r\n"},"lineCount":null}},"error":null,"hash":"aa7e0420a9d8fbffa9ee0c54fc105485","cacheData":{"env":{}}}