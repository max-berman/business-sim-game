{"id":"ZIvA","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591200297000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000},{"name":"./DynamicBitmapText","loc":{"line":7,"column":32},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapText.js"},{"name":"../../GameObjectFactory","loc":{"line":8,"column":32},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/GameObjectFactory.js"}],"generated":{"js":"var e=require(\"./DynamicBitmapText\"),i=require(\"../../GameObjectFactory\");i.register(\"dynamicBitmapText\",function(i,t,r,a,n){return this.displayList.add(new e(this.scene,i,t,r,a,n))});"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":7,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":7,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":7,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":7,"column":0},"generated":{"line":1,"column":14}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":8,"column":0},"generated":{"line":1,"column":37}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":8,"column":0},"generated":{"line":1,"column":39}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":8,"column":0},"generated":{"line":1,"column":47}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":52,"column":0},"generated":{"line":1,"column":74}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":52,"column":0},"generated":{"line":1,"column":76}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":52,"column":0},"generated":{"line":1,"column":85}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":52,"column":0},"generated":{"line":1,"column":105}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":52,"column":0},"generated":{"line":1,"column":114}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":52,"column":0},"generated":{"line":1,"column":116}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":52,"column":0},"generated":{"line":1,"column":118}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":52,"column":0},"generated":{"line":1,"column":120}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":52,"column":0},"generated":{"line":1,"column":122}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":54,"column":0},"generated":{"line":1,"column":125}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":54,"column":0},"generated":{"line":1,"column":132}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":54,"column":0},"generated":{"line":1,"column":137}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":54,"column":0},"generated":{"line":1,"column":149}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":54,"column":0},"generated":{"line":1,"column":153}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":54,"column":0},"generated":{"line":1,"column":157}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":54,"column":0},"generated":{"line":1,"column":159}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":54,"column":0},"generated":{"line":1,"column":164}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":54,"column":0},"generated":{"line":1,"column":170}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":54,"column":0},"generated":{"line":1,"column":172}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":54,"column":0},"generated":{"line":1,"column":174}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":54,"column":0},"generated":{"line":1,"column":176}},{"source":"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js","original":{"line":54,"column":0},"generated":{"line":1,"column":178}}],"sources":{"../node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextFactory.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar DynamicBitmapText = require('./DynamicBitmapText');\r\nvar GameObjectFactory = require('../../GameObjectFactory');\r\n\r\n/**\r\n * Creates a new Dynamic Bitmap Text Game Object and adds it to the Scene.\r\n * \r\n * BitmapText objects work by taking a texture file and an XML or JSON file that describes the font structure.\r\n * \r\n * During rendering for each letter of the text is rendered to the display, proportionally spaced out and aligned to\r\n * match the font structure.\r\n * \r\n * Dynamic Bitmap Text objects are different from Static Bitmap Text in that they invoke a callback for each\r\n * letter being rendered during the render pass. This callback allows you to manipulate the properties of\r\n * each letter being rendered, such as its position, scale or tint, allowing you to create interesting effects\r\n * like jiggling text, which can't be done with Static text. This means that Dynamic Text takes more processing\r\n * time, so only use them if you require the callback ability they have.\r\n *\r\n * BitmapText objects are less flexible than Text objects, in that they have less features such as shadows, fills and the ability\r\n * to use Web Fonts, however you trade this flexibility for rendering speed. You can also create visually compelling BitmapTexts by\r\n * processing the font texture in an image editor, applying fills and any other effects required.\r\n *\r\n * To create multi-line text insert \\r, \\n or \\r\\n escape codes into the text string.\r\n *\r\n * To create a BitmapText data files you need a 3rd party app such as:\r\n *\r\n * BMFont (Windows, free): http://www.angelcode.com/products/bmfont/\r\n * Glyph Designer (OS X, commercial): http://www.71squared.com/en/glyphdesigner\r\n * Littera (Web-based, free): http://kvazars.com/littera/\r\n *\r\n * For most use cases it is recommended to use XML. If you wish to use JSON, the formatting should be equal to the result of\r\n * converting a valid XML file through the popular X2JS library. An online tool for conversion can be found here: http://codebeautify.org/xmltojson\r\n *\r\n * Note: This method will only be available if the Dynamic Bitmap Text Game Object has been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#dynamicBitmapText\r\n * @since 3.0.0\r\n *\r\n * @param {number} x - The x position of the Game Object.\r\n * @param {number} y - The y position of the Game Object.\r\n * @param {string} font - The key of the font to use from the BitmapFont cache.\r\n * @param {(string|string[])} [text] - The string, or array of strings, to be set as the content of this Bitmap Text.\r\n * @param {number} [size] - The font size to set.\r\n *\r\n * @return {Phaser.GameObjects.DynamicBitmapText} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('dynamicBitmapText', function (x, y, font, text, size)\r\n{\r\n    return this.displayList.add(new DynamicBitmapText(this.scene, x, y, font, text, size));\r\n});\r\n\r\n//  When registering a factory function 'this' refers to the GameObjectFactory context.\r\n//\r\n//  There are several properties available to use:\r\n//\r\n//  this.scene - a reference to the Scene that owns the GameObjectFactory\r\n//  this.displayList - a reference to the Display List the Scene owns\r\n//  this.updateList - a reference to the Update List the Scene owns\r\n"},"lineCount":null}},"error":null,"hash":"05558eacb183699d34e1a6dc4d0b11f2","cacheData":{"env":{}}}