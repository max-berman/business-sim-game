{"id":"DKmi","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591200297000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000},{"name":"./SafeRange","loc":{"line":7,"column":24},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/utils/array/CountAllMatching.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/utils/array/SafeRange.js"}],"generated":{"js":"var r=require(\"./SafeRange\"),e=function(e,o,a,i,n){void 0===i&&(i=0),void 0===n&&(n=e.length);var v=0;if(r(e,i,n))for(var f=i;f<n;f++){e[f][o]===a&&v++}return v};module.exports=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":7,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":7,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":7,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":7,"column":0},"generated":{"line":1,"column":14}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":23,"column":0},"generated":{"line":1,"column":29}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":23,"column":0},"generated":{"line":1,"column":31}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":23,"column":0},"generated":{"line":1,"column":40}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":23,"column":0},"generated":{"line":1,"column":42}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":23,"column":0},"generated":{"line":1,"column":44}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":23,"column":0},"generated":{"line":1,"column":46}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":23,"column":0},"generated":{"line":1,"column":48}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":25,"column":0},"generated":{"line":1,"column":56}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":25,"column":0},"generated":{"line":1,"column":60}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":25,"column":0},"generated":{"line":1,"column":64}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":25,"column":0},"generated":{"line":1,"column":66}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":26,"column":0},"generated":{"line":1,"column":74}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":26,"column":0},"generated":{"line":1,"column":78}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":26,"column":0},"generated":{"line":1,"column":82}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":26,"column":0},"generated":{"line":1,"column":84}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":26,"column":0},"generated":{"line":1,"column":86}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":28,"column":0},"generated":{"line":1,"column":94}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":28,"column":0},"generated":{"line":1,"column":98}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":28,"column":0},"generated":{"line":1,"column":100}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":30,"column":0},"generated":{"line":1,"column":102}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":30,"column":0},"generated":{"line":1,"column":105}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":30,"column":0},"generated":{"line":1,"column":107}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":30,"column":0},"generated":{"line":1,"column":109}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":30,"column":0},"generated":{"line":1,"column":111}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":32,"column":0},"generated":{"line":1,"column":114}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":32,"column":0},"generated":{"line":1,"column":118}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":32,"column":0},"generated":{"line":1,"column":122}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":32,"column":0},"generated":{"line":1,"column":124}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":32,"column":0},"generated":{"line":1,"column":126}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":32,"column":0},"generated":{"line":1,"column":128}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":32,"column":0},"generated":{"line":1,"column":130}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":33,"column":0},"generated":{"line":1,"column":134}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":34,"column":0},"generated":{"line":1,"column":135}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":34,"column":0},"generated":{"line":1,"column":137}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":36,"column":0},"generated":{"line":1,"column":140}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":36,"column":0},"generated":{"line":1,"column":145}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":38,"column":0},"generated":{"line":1,"column":148}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":43,"column":0},"generated":{"line":1,"column":152}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":43,"column":0},"generated":{"line":1,"column":159}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":46,"column":0},"generated":{"line":1,"column":162}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":46,"column":0},"generated":{"line":1,"column":169}},{"source":"../node_modules/phaser/src/utils/array/CountAllMatching.js","original":{"line":46,"column":0},"generated":{"line":1,"column":177}}],"sources":{"../node_modules/phaser/src/utils/array/CountAllMatching.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Returns the total number of elements in the array which have a property matching the given value.\r\n *\r\n * @function Phaser.Utils.Array.CountAllMatching\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {string} property - The property to test on each array element.\r\n * @param {*} value - The value to test the property against. Must pass a strict (`===`) comparison check.\r\n * @param {integer} [startIndex] - An optional start index to search from.\r\n * @param {integer} [endIndex] - An optional end index to search to.\r\n *\r\n * @return {integer} The total number of elements with properties matching the given value.\r\n */\r\nvar CountAllMatching = function (array, property, value, startIndex, endIndex)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n\r\n    var total = 0;\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        for (var i = startIndex; i < endIndex; i++)\r\n        {\r\n            var child = array[i];\r\n\r\n            if (child[property] === value)\r\n            {\r\n                total++;\r\n            }\r\n        }\r\n    }\r\n\r\n    return total;\r\n};\r\n\r\nmodule.exports = CountAllMatching;\r\n"},"lineCount":null}},"error":null,"hash":"04b0cedc3085944104705c61d8436ee0","cacheData":{"env":{}}}