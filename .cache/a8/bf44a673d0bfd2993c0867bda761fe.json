{"id":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591206076000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000},{"name":"./DOMElement","loc":{"line":7,"column":25},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/domelement/DOMElement.js"},{"name":"../GameObjectFactory","loc":{"line":8,"column":32},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/GameObjectFactory.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar DOMElement = require('./DOMElement');\r\nvar GameObjectFactory = require('../GameObjectFactory');\r\n\r\n/**\r\n * DOM Element Game Objects are a way to control and manipulate HTML Elements over the top of your game.\r\n * \r\n * In order for DOM Elements to display you have to enable them by adding the following to your game\r\n * configuration object:\r\n * \r\n * ```javascript\r\n * dom {\r\n *   createContainer: true\r\n * }\r\n * ```\r\n * \r\n * When this is added, Phaser will automatically create a DOM Container div that is positioned over the top\r\n * of the game canvas. This div is sized to match the canvas, and if the canvas size changes, as a result of\r\n * settings within the Scale Manager, the dom container is resized accordingly.\r\n * \r\n * You can create a DOM Element by either passing in DOMStrings, or by passing in a reference to an existing\r\n * Element that you wish to be placed under the control of Phaser. For example:\r\n * \r\n * ```javascript\r\n * this.add.dom(x, y, 'div', 'background-color: lime; width: 220px; height: 100px; font: 48px Arial', 'Phaser');\r\n * ```\r\n * \r\n * The above code will insert a div element into the DOM Container at the given x/y coordinate. The DOMString in\r\n * the 4th argument sets the initial CSS style of the div and the final argument is the inner text. In this case,\r\n * it will create a lime colored div that is 220px by 100px in size with the text Phaser in it, in an Arial font.\r\n * \r\n * You should nearly always, without exception, use explicitly sized HTML Elements, in order to fully control\r\n * alignment and positioning of the elements next to regular game content.\r\n * \r\n * Rather than specify the CSS and HTML directly you can use the `load.html` File Loader to load it into the\r\n * cache and then use the `createFromCache` method instead. You can also use `createFromHTML` and various other\r\n * methods available in this class to help construct your elements.\r\n * \r\n * Once the element has been created you can then control it like you would any other Game Object. You can set its\r\n * position, scale, rotation, alpha and other properties. It will move as the main Scene Camera moves and be clipped\r\n * at the edge of the canvas. It's important to remember some limitations of DOM Elements: The obvious one is that\r\n * they appear above or below your game canvas. You cannot blend them into the display list, meaning you cannot have\r\n * a DOM Element, then a Sprite, then another DOM Element behind it.\r\n * \r\n * They also cannot be enabled for input. To do that, you have to use the `addListener` method to add native event\r\n * listeners directly. The final limitation is to do with cameras. The DOM Container is sized to match the game canvas\r\n * entirely and clipped accordingly. DOM Elements respect camera scrolling and scrollFactor settings, but if you\r\n * change the size of the camera so it no longer matches the size of the canvas, they won't be clipped accordingly.\r\n * \r\n * Also, all DOM Elements are inserted into the same DOM Container, regardless of which Scene they are created in.\r\n * \r\n * DOM Elements are a powerful way to align native HTML with your Phaser Game Objects. For example, you can insert\r\n * a login form for a multiplayer game directly into your title screen. Or a text input box for a highscore table.\r\n * Or a banner ad from a 3rd party service. Or perhaps you'd like to use them for high resolution text display and\r\n * UI. The choice is up to you, just remember that you're dealing with standard HTML and CSS floating over the top\r\n * of your game, and should treat it accordingly.\r\n *\r\n * Note: This method will only be available if the DOM Element Game Object has been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#dom\r\n * @since 3.17.0\r\n *\r\n * @param {number} x - The horizontal position of this DOM Element in the world.\r\n * @param {number} y - The vertical position of this DOM Element in the world.\r\n * @param {(HTMLElement|string)} [element] - An existing DOM element, or a string. If a string starting with a # it will do a `getElementById` look-up on the string (minus the hash). Without a hash, it represents the type of element to create, i.e. 'div'.\r\n * @param {(string|any)} [style] - If a string, will be set directly as the elements `style` property value. If a plain object, will be iterated and the values transferred. In both cases the values replacing whatever CSS styles may have been previously set.\r\n * @param {string} [innerText] - If given, will be set directly as the elements `innerText` property value, replacing whatever was there before.\r\n *\r\n * @return {Phaser.GameObjects.DOMElement} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('dom', function (x, y, element, style, innerText)\r\n{\r\n    var gameObject = new DOMElement(this.scene, x, y, element, style, innerText);\r\n\r\n    this.displayList.add(gameObject);\r\n    this.updateList.add(gameObject);\r\n\r\n    return gameObject;\r\n});\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}}],"sources":{"../node_modules/phaser/src/gameobjects/domelement/DOMElementFactory.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar DOMElement = require('./DOMElement');\r\nvar GameObjectFactory = require('../GameObjectFactory');\r\n\r\n/**\r\n * DOM Element Game Objects are a way to control and manipulate HTML Elements over the top of your game.\r\n * \r\n * In order for DOM Elements to display you have to enable them by adding the following to your game\r\n * configuration object:\r\n * \r\n * ```javascript\r\n * dom {\r\n *   createContainer: true\r\n * }\r\n * ```\r\n * \r\n * When this is added, Phaser will automatically create a DOM Container div that is positioned over the top\r\n * of the game canvas. This div is sized to match the canvas, and if the canvas size changes, as a result of\r\n * settings within the Scale Manager, the dom container is resized accordingly.\r\n * \r\n * You can create a DOM Element by either passing in DOMStrings, or by passing in a reference to an existing\r\n * Element that you wish to be placed under the control of Phaser. For example:\r\n * \r\n * ```javascript\r\n * this.add.dom(x, y, 'div', 'background-color: lime; width: 220px; height: 100px; font: 48px Arial', 'Phaser');\r\n * ```\r\n * \r\n * The above code will insert a div element into the DOM Container at the given x/y coordinate. The DOMString in\r\n * the 4th argument sets the initial CSS style of the div and the final argument is the inner text. In this case,\r\n * it will create a lime colored div that is 220px by 100px in size with the text Phaser in it, in an Arial font.\r\n * \r\n * You should nearly always, without exception, use explicitly sized HTML Elements, in order to fully control\r\n * alignment and positioning of the elements next to regular game content.\r\n * \r\n * Rather than specify the CSS and HTML directly you can use the `load.html` File Loader to load it into the\r\n * cache and then use the `createFromCache` method instead. You can also use `createFromHTML` and various other\r\n * methods available in this class to help construct your elements.\r\n * \r\n * Once the element has been created you can then control it like you would any other Game Object. You can set its\r\n * position, scale, rotation, alpha and other properties. It will move as the main Scene Camera moves and be clipped\r\n * at the edge of the canvas. It's important to remember some limitations of DOM Elements: The obvious one is that\r\n * they appear above or below your game canvas. You cannot blend them into the display list, meaning you cannot have\r\n * a DOM Element, then a Sprite, then another DOM Element behind it.\r\n * \r\n * They also cannot be enabled for input. To do that, you have to use the `addListener` method to add native event\r\n * listeners directly. The final limitation is to do with cameras. The DOM Container is sized to match the game canvas\r\n * entirely and clipped accordingly. DOM Elements respect camera scrolling and scrollFactor settings, but if you\r\n * change the size of the camera so it no longer matches the size of the canvas, they won't be clipped accordingly.\r\n * \r\n * Also, all DOM Elements are inserted into the same DOM Container, regardless of which Scene they are created in.\r\n * \r\n * DOM Elements are a powerful way to align native HTML with your Phaser Game Objects. For example, you can insert\r\n * a login form for a multiplayer game directly into your title screen. Or a text input box for a highscore table.\r\n * Or a banner ad from a 3rd party service. Or perhaps you'd like to use them for high resolution text display and\r\n * UI. The choice is up to you, just remember that you're dealing with standard HTML and CSS floating over the top\r\n * of your game, and should treat it accordingly.\r\n *\r\n * Note: This method will only be available if the DOM Element Game Object has been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#dom\r\n * @since 3.17.0\r\n *\r\n * @param {number} x - The horizontal position of this DOM Element in the world.\r\n * @param {number} y - The vertical position of this DOM Element in the world.\r\n * @param {(HTMLElement|string)} [element] - An existing DOM element, or a string. If a string starting with a # it will do a `getElementById` look-up on the string (minus the hash). Without a hash, it represents the type of element to create, i.e. 'div'.\r\n * @param {(string|any)} [style] - If a string, will be set directly as the elements `style` property value. If a plain object, will be iterated and the values transferred. In both cases the values replacing whatever CSS styles may have been previously set.\r\n * @param {string} [innerText] - If given, will be set directly as the elements `innerText` property value, replacing whatever was there before.\r\n *\r\n * @return {Phaser.GameObjects.DOMElement} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('dom', function (x, y, element, style, innerText)\r\n{\r\n    var gameObject = new DOMElement(this.scene, x, y, element, style, innerText);\r\n\r\n    this.displayList.add(gameObject);\r\n    this.updateList.add(gameObject);\r\n\r\n    return gameObject;\r\n});\r\n"},"lineCount":85}},"error":null,"hash":"afe0293b230e835d55c137d782fc5abc","cacheData":{"env":{}}}