{"id":"TEna","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591200297000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000}],"generated":{"js":"var t=function(t){return!!t._justUp&&(t._justUp=!1,!0)};module.exports=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/input/keyboard/keys/JustUp.js","original":{"line":22,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/input/keyboard/keys/JustUp.js","original":{"line":22,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/phaser/src/input/keyboard/keys/JustUp.js","original":{"line":22,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/phaser/src/input/keyboard/keys/JustUp.js","original":{"line":22,"column":0},"generated":{"line":1,"column":15}},{"source":"../node_modules/phaser/src/input/keyboard/keys/JustUp.js","original":{"line":24,"column":0},"generated":{"line":1,"column":18}},{"source":"../node_modules/phaser/src/input/keyboard/keys/JustUp.js","original":{"line":24,"column":0},"generated":{"line":1,"column":26}},{"source":"../node_modules/phaser/src/input/keyboard/keys/JustUp.js","original":{"line":24,"column":0},"generated":{"line":1,"column":28}},{"source":"../node_modules/phaser/src/input/keyboard/keys/JustUp.js","original":{"line":26,"column":0},"generated":{"line":1,"column":38}},{"source":"../node_modules/phaser/src/input/keyboard/keys/JustUp.js","original":{"line":26,"column":0},"generated":{"line":1,"column":40}},{"source":"../node_modules/phaser/src/input/keyboard/keys/JustUp.js","original":{"line":26,"column":0},"generated":{"line":1,"column":49}},{"source":"../node_modules/phaser/src/input/keyboard/keys/JustUp.js","original":{"line":28,"column":0},"generated":{"line":1,"column":52}},{"source":"../node_modules/phaser/src/input/keyboard/keys/JustUp.js","original":{"line":36,"column":0},"generated":{"line":1,"column":56}},{"source":"../node_modules/phaser/src/input/keyboard/keys/JustUp.js","original":{"line":36,"column":0},"generated":{"line":1,"column":63}},{"source":"../node_modules/phaser/src/input/keyboard/keys/JustUp.js","original":{"line":36,"column":0},"generated":{"line":1,"column":71}}],"sources":{"../node_modules/phaser/src/input/keyboard/keys/JustUp.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The justUp value allows you to test if this Key has just been released or not.\r\n * \r\n * When you check this value it will return `true` if the Key is up, otherwise `false`.\r\n * \r\n * You can only call JustUp once per key release. It will only return `true` once, until the Key is pressed down and released again.\r\n * This allows you to use it in situations where you want to check if this key is up without using an event, such as in a core game loop.\r\n *\r\n * @function Phaser.Input.Keyboard.JustUp\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.Keyboard.Key} key - The Key to check to see if it's just up or not.\r\n *\r\n * @return {boolean} `true` if the Key was just released, otherwise `false`.\r\n */\r\nvar JustUp = function (key)\r\n{\r\n    if (key._justUp)\r\n    {\r\n        key._justUp = false;\r\n\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n};\r\n\r\nmodule.exports = JustUp;\r\n"},"lineCount":null}},"error":null,"hash":"0b4629e0c3aff93946a6c625a6d98c95","cacheData":{"env":{}}}