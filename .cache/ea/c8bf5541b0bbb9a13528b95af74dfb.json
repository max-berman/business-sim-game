{"id":"r4If","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591200297000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000}],"generated":{"js":"var r=function(r,e,n){return r<<16|e<<8|n};module.exports=r;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":19,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":19,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":19,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":19,"column":0},"generated":{"line":1,"column":15}},{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":19,"column":0},"generated":{"line":1,"column":17}},{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":19,"column":0},"generated":{"line":1,"column":19}},{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":21,"column":0},"generated":{"line":1,"column":22}},{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":21,"column":0},"generated":{"line":1,"column":29}},{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":21,"column":0},"generated":{"line":1,"column":32}},{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":21,"column":0},"generated":{"line":1,"column":35}},{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":21,"column":0},"generated":{"line":1,"column":38}},{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":21,"column":0},"generated":{"line":1,"column":40}},{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":24,"column":0},"generated":{"line":1,"column":43}},{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":24,"column":0},"generated":{"line":1,"column":50}},{"source":"../node_modules/phaser/src/display/color/GetColor.js","original":{"line":24,"column":0},"generated":{"line":1,"column":58}}],"sources":{"../node_modules/phaser/src/display/color/GetColor.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Given 3 separate color values this will return an integer representation of it.\r\n *\r\n * @function Phaser.Display.Color.GetColor\r\n * @since 3.0.0\r\n *\r\n * @param {integer} red - The red color value. A number between 0 and 255.\r\n * @param {integer} green - The green color value. A number between 0 and 255.\r\n * @param {integer} blue - The blue color value. A number between 0 and 255.\r\n *\r\n * @return {number} The combined color value.\r\n */\r\nvar GetColor = function (red, green, blue)\r\n{\r\n    return red << 16 | green << 8 | blue;\r\n};\r\n\r\nmodule.exports = GetColor;\r\n"},"lineCount":null}},"error":null,"hash":"ce35f3e5041a7271a4d1888a2f1f329d","cacheData":{"env":{}}}