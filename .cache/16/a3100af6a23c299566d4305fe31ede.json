{"id":"mkGR","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591200297000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000}],"generated":{"js":"var r=function(r,e){return r.replace(/%([0-9]+)/g,function(r,n){return e[Number(n)-1]})};module.exports=r;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":21,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":21,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":21,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":21,"column":0},"generated":{"line":1,"column":15}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":21,"column":0},"generated":{"line":1,"column":17}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":23,"column":0},"generated":{"line":1,"column":20}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":23,"column":0},"generated":{"line":1,"column":27}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":23,"column":0},"generated":{"line":1,"column":29}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":23,"column":0},"generated":{"line":1,"column":37}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":23,"column":0},"generated":{"line":1,"column":50}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":23,"column":0},"generated":{"line":1,"column":59}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":23,"column":0},"generated":{"line":1,"column":61}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":25,"column":0},"generated":{"line":1,"column":64}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":25,"column":0},"generated":{"line":1,"column":71}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":25,"column":0},"generated":{"line":1,"column":73}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":25,"column":0},"generated":{"line":1,"column":80}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":25,"column":0},"generated":{"line":1,"column":83}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":29,"column":0},"generated":{"line":1,"column":89}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":29,"column":0},"generated":{"line":1,"column":96}},{"source":"../node_modules/phaser/src/utils/string/Format.js","original":{"line":29,"column":0},"generated":{"line":1,"column":104}}],"sources":{"../node_modules/phaser/src/utils/string/Format.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Takes a string and replaces instances of markers with values in the given array.\r\n * The markers take the form of `%1`, `%2`, etc. I.e.:\r\n *\r\n * `Format(\"The %1 is worth %2 gold\", [ 'Sword', 500 ])`\r\n *\r\n * @function Phaser.Utils.String.Format\r\n * @since 3.0.0\r\n *\r\n * @param {string} string - The string containing the replacement markers.\r\n * @param {array} values - An array containing values that will replace the markers. If no value exists an empty string is inserted instead.\r\n *\r\n * @return {string} The string containing replaced values.\r\n */\r\nvar Format = function (string, values)\r\n{\r\n    return string.replace(/%([0-9]+)/g, function (s, n)\r\n    {\r\n        return values[Number(n) - 1];\r\n    });\r\n};\r\n\r\nmodule.exports = Format;\r\n"},"lineCount":null}},"error":null,"hash":"ebfc2d905dd76c565edb1520f5fea595","cacheData":{"env":{}}}