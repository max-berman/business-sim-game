{"id":"yvcn","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591200297000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000},{"name":"./PropertyValueInc","loc":{"line":7,"column":31},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/actions/Angle.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/actions/PropertyValueInc.js"}],"generated":{"js":"var e=require(\"./PropertyValueInc\"),r=function(r,n,u,o,t){return e(r,\"angle\",n,u,o,t)};module.exports=r;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":7,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":7,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":7,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":7,"column":0},"generated":{"line":1,"column":14}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":30,"column":0},"generated":{"line":1,"column":36}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":30,"column":0},"generated":{"line":1,"column":38}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":30,"column":0},"generated":{"line":1,"column":47}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":30,"column":0},"generated":{"line":1,"column":49}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":30,"column":0},"generated":{"line":1,"column":51}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":30,"column":0},"generated":{"line":1,"column":53}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":30,"column":0},"generated":{"line":1,"column":55}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":32,"column":0},"generated":{"line":1,"column":58}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":32,"column":0},"generated":{"line":1,"column":65}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":32,"column":0},"generated":{"line":1,"column":67}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":32,"column":0},"generated":{"line":1,"column":69}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":32,"column":0},"generated":{"line":1,"column":77}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":32,"column":0},"generated":{"line":1,"column":79}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":32,"column":0},"generated":{"line":1,"column":81}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":32,"column":0},"generated":{"line":1,"column":83}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":35,"column":0},"generated":{"line":1,"column":87}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":35,"column":0},"generated":{"line":1,"column":94}},{"source":"../node_modules/phaser/src/actions/Angle.js","original":{"line":35,"column":0},"generated":{"line":1,"column":102}}],"sources":{"../node_modules/phaser/src/actions/Angle.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar PropertyValueInc = require('./PropertyValueInc');\r\n\r\n/**\r\n * Takes an array of Game Objects, or any objects that have a public `angle` property,\r\n * and then adds the given value to each of their `angle` properties.\r\n *\r\n * The optional `step` property is applied incrementally, multiplied by each item in the array.\r\n *\r\n * To use this with a Group: `Angle(group.getChildren(), value, step)`\r\n *\r\n * @function Phaser.Actions.Angle\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - The array of items to be updated by this action.\r\n * @param {number} value - The amount to be added to the `angle` property.\r\n * @param {number} [step=0] - This is added to the `value` amount, multiplied by the iteration counter.\r\n * @param {integer} [index=0] - An optional offset to start searching from within the items array.\r\n * @param {integer} [direction=1] - The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning.\r\n *\r\n * @return {(array|Phaser.GameObjects.GameObject[])} The array of objects that were passed to this Action.\r\n */\r\nvar Angle = function (items, value, step, index, direction)\r\n{\r\n    return PropertyValueInc(items, 'angle', value, step, index, direction);\r\n};\r\n\r\nmodule.exports = Angle;\r\n"},"lineCount":null}},"error":null,"hash":"6b4d00d84e8ccc06d09b06c7cdb01cfb","cacheData":{"env":{}}}