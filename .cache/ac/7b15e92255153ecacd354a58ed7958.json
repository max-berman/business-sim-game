{"id":"rpuD","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591200297000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000}],"generated":{"js":"module.exports={NONE:0,WIDTH_CONTROLS_HEIGHT:1,HEIGHT_CONTROLS_WIDTH:2,FIT:3,ENVELOP:4,RESIZE:5};"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":25,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":25,"column":0},"generated":{"line":1,"column":7}},{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":25,"column":0},"generated":{"line":1,"column":15}},{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":37,"column":0},"generated":{"line":1,"column":16}},{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":37,"column":0},"generated":{"line":1,"column":21}},{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":47,"column":0},"generated":{"line":1,"column":23}},{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":47,"column":0},"generated":{"line":1,"column":45}},{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":57,"column":0},"generated":{"line":1,"column":47}},{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":57,"column":0},"generated":{"line":1,"column":69}},{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":69,"column":0},"generated":{"line":1,"column":71}},{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":69,"column":0},"generated":{"line":1,"column":75}},{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":80,"column":0},"generated":{"line":1,"column":77}},{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":80,"column":0},"generated":{"line":1,"column":85}},{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":90,"column":0},"generated":{"line":1,"column":87}},{"source":"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js","original":{"line":90,"column":0},"generated":{"line":1,"column":94}}],"sources":{"../node_modules/phaser/src/scale/const/SCALE_MODE_CONST.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Phaser Scale Manager constants for the different scale modes available.\r\n * \r\n * @namespace Phaser.Scale.ScaleModes\r\n * @memberof Phaser.Scale\r\n * @since 3.16.0\r\n */\r\n\r\n/**\r\n * Phaser Scale Manager constants for the different scale modes available.\r\n * \r\n * To find out what each mode does please see [Phaser.Scale.ScaleModes]{@link Phaser.Scale.ScaleModes}.\r\n * \r\n * @typedef {Phaser.Scale.ScaleModes} Phaser.Scale.ScaleModeType\r\n * @memberof Phaser.Scale\r\n * @since 3.16.0\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    /**\r\n     * No scaling happens at all. The canvas is set to the size given in the game config and Phaser doesn't change it\r\n     * again from that point on. If you change the canvas size, either via CSS, or directly via code, then you need\r\n     * to call the Scale Managers `resize` method to give the new dimensions, or input events will stop working.\r\n     * \r\n     * @name Phaser.Scale.ScaleModes.NONE\r\n     * @type {integer}\r\n     * @const\r\n     * @since 3.16.0\r\n     */\r\n    NONE: 0,\r\n\r\n    /**\r\n     * The height is automatically adjusted based on the width.\r\n     * \r\n     * @name Phaser.Scale.ScaleModes.WIDTH_CONTROLS_HEIGHT\r\n     * @type {integer}\r\n     * @const\r\n     * @since 3.16.0\r\n     */\r\n    WIDTH_CONTROLS_HEIGHT: 1,\r\n\r\n    /**\r\n     * The width is automatically adjusted based on the height.\r\n     * \r\n     * @name Phaser.Scale.ScaleModes.HEIGHT_CONTROLS_WIDTH\r\n     * @type {integer}\r\n     * @const\r\n     * @since 3.16.0\r\n     */\r\n    HEIGHT_CONTROLS_WIDTH: 2,\r\n\r\n    /**\r\n     * The width and height are automatically adjusted to fit inside the given target area,\r\n     * while keeping the aspect ratio. Depending on the aspect ratio there may be some space\r\n     * inside the area which is not covered.\r\n     * \r\n     * @name Phaser.Scale.ScaleModes.FIT\r\n     * @type {integer}\r\n     * @const\r\n     * @since 3.16.0\r\n     */\r\n    FIT: 3,\r\n\r\n    /**\r\n     * The width and height are automatically adjusted to make the size cover the entire target\r\n     * area while keeping the aspect ratio. This may extend further out than the target size.\r\n     * \r\n     * @name Phaser.Scale.ScaleModes.ENVELOP\r\n     * @type {integer}\r\n     * @const\r\n     * @since 3.16.0\r\n     */\r\n    ENVELOP: 4,\r\n\r\n    /**\r\n     * The Canvas is resized to fit all available _parent_ space, regardless of aspect ratio.\r\n     * \r\n     * @name Phaser.Scale.ScaleModes.RESIZE\r\n     * @type {integer}\r\n     * @const\r\n     * @since 3.16.0\r\n     */\r\n    RESIZE: 5\r\n\r\n};\r\n"},"lineCount":null}},"error":null,"hash":"49bf1a272f5207fb873e4dea5f79b348","cacheData":{"env":{}}}