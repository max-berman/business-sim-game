{"id":"BEpr","dependencies":[{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/package.json","includedInParent":true,"mtime":1591200297000},{"name":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/package.json","includedInParent":true,"mtime":1590485515000},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/utils/Class.js"},{"name":"../../gameobjects/components","loc":{"line":8,"column":25},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/components/index.js"},{"name":"./DynamicTilemapLayerRender","loc":{"line":9,"column":40},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayerRender.js"},{"name":"../../gameobjects/GameObject","loc":{"line":10,"column":25},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/gameobjects/GameObject.js"},{"name":"../components","loc":{"line":11,"column":32},"parent":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/Users/maxie/Dev/code-challenge/adv-capitalist/node_modules/phaser/src/tilemaps/components/index.js"}],"generated":{"js":"var i=require(\"../../utils/Class\"),t=require(\"../../gameobjects/components\"),e=require(\"./DynamicTilemapLayerRender\"),l=require(\"../../gameobjects/GameObject\"),r=require(\"../components\"),n=new i({Extends:l,Mixins:[t.Alpha,t.BlendMode,t.ComputedSize,t.Depth,t.Flip,t.GetBounds,t.Origin,t.Pipeline,t.Transform,t.Visible,t.ScrollFactor,e],initialize:function(i,t,e,n,s,o){l.call(this,i,\"DynamicTilemapLayer\"),this.isTilemap=!0,this.tilemap=t,this.layerIndex=e,this.layer=t.layers[e],this.layer.tilemapLayer=this,this.tileset=[],this.culledTiles=[],this.skipCull=!1,this.tilesDrawn=0,this.tilesTotal=this.layer.width*this.layer.height,this.cullPaddingX=1,this.cullPaddingY=1,this.cullCallback=r.CullTiles,this._renderOrder=0,this.gidMap=[],this.setTilesets(n),this.setAlpha(this.layer.alpha),this.setPosition(s,o),this.setOrigin(),this.setSize(t.tileWidth*this.layer.width,t.tileHeight*this.layer.height),this.initPipeline(\"TextureTintPipeline\")},setTilesets:function(i){var t=[],e=[],l=this.tilemap;Array.isArray(i)||(i=[i]);for(var r=0;r<i.length;r++){var n=i[r];if(\"string\"==typeof n&&(n=l.getTileset(n)),n){e.push(n);for(var s=n.firstgid,o=0;o<n.total;o++)t[s+o]=n}}this.gidMap=t,this.tileset=e},setRenderOrder:function(i){return\"string\"==typeof i&&(i=[\"right-down\",\"left-down\",\"right-up\",\"left-up\"].indexOf(i)),i>=0&&i<4&&(this._renderOrder=i),this},calculateFacesAt:function(i,t){return r.CalculateFacesAt(i,t,this.layer),this},calculateFacesWithin:function(i,t,e,l){return r.CalculateFacesWithin(i,t,e,l,this.layer),this},createFromTiles:function(i,t,e,l,n){return r.CreateFromTiles(i,t,e,l,n,this.layer)},cull:function(i){return this.cullCallback(this.layer,i,this.culledTiles,this._renderOrder)},copy:function(i,t,e,l,n,s,o){return r.Copy(i,t,e,l,n,s,o,this.layer),this},destroy:function(i){void 0===i&&(i=!0),this.tilemap&&(this.layer.tilemapLayer===this&&(this.layer.tilemapLayer=void 0),i&&this.tilemap.removeLayer(this),this.tilemap=void 0,this.layer=void 0,this.culledTiles.length=0,this.cullCallback=null,this.gidMap=[],this.tileset=[],l.prototype.destroy.call(this))},fill:function(i,t,e,l,n,s){return r.Fill(i,t,e,l,n,s,this.layer),this},filterTiles:function(i,t,e,l,n,s,o){return r.FilterTiles(i,t,e,l,n,s,o,this.layer)},findByIndex:function(i,t,e){return r.FindByIndex(i,t,e,this.layer)},findTile:function(i,t,e,l,n,s,o){return r.FindTile(i,t,e,l,n,s,o,this.layer)},forEachTile:function(i,t,e,l,n,s,o){return r.ForEachTile(i,t,e,l,n,s,o,this.layer),this},getTileAt:function(i,t,e){return r.GetTileAt(i,t,e,this.layer)},getTileAtWorldXY:function(i,t,e,l){return r.GetTileAtWorldXY(i,t,e,l,this.layer)},getTilesWithin:function(i,t,e,l,n){return r.GetTilesWithin(i,t,e,l,n,this.layer)},getTilesWithinShape:function(i,t,e){return r.GetTilesWithinShape(i,t,e,this.layer)},getTilesWithinWorldXY:function(i,t,e,l,n,s){return r.GetTilesWithinWorldXY(i,t,e,l,n,s,this.layer)},hasTileAt:function(i,t){return r.HasTileAt(i,t,this.layer)},hasTileAtWorldXY:function(i,t,e){return r.HasTileAtWorldXY(i,t,e,this.layer)},putTileAt:function(i,t,e,l){return r.PutTileAt(i,t,e,l,this.layer)},putTileAtWorldXY:function(i,t,e,l,n){return r.PutTileAtWorldXY(i,t,e,l,n,this.layer)},putTilesAt:function(i,t,e,l){return r.PutTilesAt(i,t,e,l,this.layer),this},randomize:function(i,t,e,l,n){return r.Randomize(i,t,e,l,n,this.layer),this},removeTileAt:function(i,t,e,l){return r.RemoveTileAt(i,t,e,l,this.layer)},removeTileAtWorldXY:function(i,t,e,l,n){return r.RemoveTileAtWorldXY(i,t,e,l,n,this.layer)},renderDebug:function(i,t){return r.RenderDebug(i,t,this.layer),this},replaceByIndex:function(i,t,e,l,n,s){return r.ReplaceByIndex(i,t,e,l,n,s,this.layer),this},setSkipCull:function(i){return void 0===i&&(i=!0),this.skipCull=i,this},setCullPadding:function(i,t){return void 0===i&&(i=1),void 0===t&&(t=1),this.cullPaddingX=i,this.cullPaddingY=t,this},setCollision:function(i,t,e,l){return r.SetCollision(i,t,e,this.layer,l),this},setCollisionBetween:function(i,t,e,l){return r.SetCollisionBetween(i,t,e,l,this.layer),this},setCollisionByProperty:function(i,t,e){return r.SetCollisionByProperty(i,t,e,this.layer),this},setCollisionByExclusion:function(i,t,e){return r.SetCollisionByExclusion(i,t,e,this.layer),this},setCollisionFromCollisionGroup:function(i,t){return r.SetCollisionFromCollisionGroup(i,t,this.layer),this},setTileIndexCallback:function(i,t,e){return r.SetTileIndexCallback(i,t,e,this.layer),this},setTileLocationCallback:function(i,t,e,l,n,s){return r.SetTileLocationCallback(i,t,e,l,n,s,this.layer),this},shuffle:function(i,t,e,l){return r.Shuffle(i,t,e,l,this.layer),this},swapByIndex:function(i,t,e,l,n,s){return r.SwapByIndex(i,t,e,l,n,s,this.layer),this},tileToWorldX:function(i,t){return r.TileToWorldX(i,t,this.layer)},tileToWorldY:function(i,t){return r.TileToWorldY(i,t,this.layer)},tileToWorldXY:function(i,t,e,l){return r.TileToWorldXY(i,t,e,l,this.layer)},weightedRandomize:function(i,t,e,l,n){return r.WeightedRandomize(i,t,e,l,n,this.layer),this},worldToTileX:function(i,t,e){return r.WorldToTileX(i,t,e,this.layer)},worldToTileY:function(i,t,e){return r.WorldToTileY(i,t,e,this.layer)},worldToTileXY:function(i,t,e,l,n){return r.WorldToTileXY(i,t,e,l,n,this.layer)}});module.exports=n;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":4}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":6}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":14}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":8,"column":0},"generated":{"line":1,"column":35}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":8,"column":0},"generated":{"line":1,"column":37}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":8,"column":0},"generated":{"line":1,"column":45}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":9,"column":0},"generated":{"line":1,"column":77}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":9,"column":0},"generated":{"line":1,"column":79}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":9,"column":0},"generated":{"line":1,"column":87}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":10,"column":0},"generated":{"line":1,"column":118}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":10,"column":0},"generated":{"line":1,"column":120}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":10,"column":0},"generated":{"line":1,"column":128}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":11,"column":0},"generated":{"line":1,"column":160}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":11,"column":0},"generated":{"line":1,"column":162}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":11,"column":0},"generated":{"line":1,"column":170}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":49,"column":0},"generated":{"line":1,"column":187}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":49,"column":0},"generated":{"line":1,"column":189}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":49,"column":0},"generated":{"line":1,"column":193}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":49,"column":0},"generated":{"line":1,"column":195}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":51,"column":0},"generated":{"line":1,"column":196}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":51,"column":0},"generated":{"line":1,"column":204}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":53,"column":0},"generated":{"line":1,"column":206}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":53,"column":0},"generated":{"line":1,"column":213}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":54,"column":0},"generated":{"line":1,"column":214}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":54,"column":0},"generated":{"line":1,"column":216}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":55,"column":0},"generated":{"line":1,"column":222}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":55,"column":0},"generated":{"line":1,"column":224}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":56,"column":0},"generated":{"line":1,"column":234}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":56,"column":0},"generated":{"line":1,"column":236}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":57,"column":0},"generated":{"line":1,"column":249}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":57,"column":0},"generated":{"line":1,"column":251}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":58,"column":0},"generated":{"line":1,"column":257}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":58,"column":0},"generated":{"line":1,"column":259}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":59,"column":0},"generated":{"line":1,"column":264}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":59,"column":0},"generated":{"line":1,"column":266}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":60,"column":0},"generated":{"line":1,"column":276}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":60,"column":0},"generated":{"line":1,"column":278}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":61,"column":0},"generated":{"line":1,"column":285}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":61,"column":0},"generated":{"line":1,"column":287}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":62,"column":0},"generated":{"line":1,"column":296}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":62,"column":0},"generated":{"line":1,"column":298}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":63,"column":0},"generated":{"line":1,"column":308}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":63,"column":0},"generated":{"line":1,"column":310}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":64,"column":0},"generated":{"line":1,"column":318}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":64,"column":0},"generated":{"line":1,"column":320}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":65,"column":0},"generated":{"line":1,"column":333}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":68,"column":0},"generated":{"line":1,"column":336}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":70,"column":0},"generated":{"line":1,"column":347}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":70,"column":0},"generated":{"line":1,"column":356}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":70,"column":0},"generated":{"line":1,"column":358}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":70,"column":0},"generated":{"line":1,"column":360}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":70,"column":0},"generated":{"line":1,"column":362}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":70,"column":0},"generated":{"line":1,"column":364}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":70,"column":0},"generated":{"line":1,"column":366}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":369}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":371}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":376}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":381}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":383}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":82,"column":0},"generated":{"line":1,"column":406}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":82,"column":0},"generated":{"line":1,"column":411}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":82,"column":0},"generated":{"line":1,"column":422}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":91,"column":0},"generated":{"line":1,"column":424}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":91,"column":0},"generated":{"line":1,"column":429}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":91,"column":0},"generated":{"line":1,"column":437}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":100,"column":0},"generated":{"line":1,"column":439}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":100,"column":0},"generated":{"line":1,"column":444}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":100,"column":0},"generated":{"line":1,"column":455}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":110,"column":0},"generated":{"line":1,"column":457}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":110,"column":0},"generated":{"line":1,"column":462}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":110,"column":0},"generated":{"line":1,"column":468}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":110,"column":0},"generated":{"line":1,"column":470}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":110,"column":0},"generated":{"line":1,"column":477}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":113,"column":0},"generated":{"line":1,"column":480}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":113,"column":0},"generated":{"line":1,"column":485}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":113,"column":0},"generated":{"line":1,"column":491}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":113,"column":0},"generated":{"line":1,"column":504}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":124,"column":0},"generated":{"line":1,"column":509}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":124,"column":0},"generated":{"line":1,"column":514}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":124,"column":0},"generated":{"line":1,"column":522}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":134,"column":0},"generated":{"line":1,"column":525}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":134,"column":0},"generated":{"line":1,"column":530}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":134,"column":0},"generated":{"line":1,"column":542}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":147,"column":0},"generated":{"line":1,"column":545}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":147,"column":0},"generated":{"line":1,"column":550}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":147,"column":0},"generated":{"line":1,"column":560}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":157,"column":0},"generated":{"line":1,"column":562}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":157,"column":0},"generated":{"line":1,"column":567}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":157,"column":0},"generated":{"line":1,"column":578}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":167,"column":0},"generated":{"line":1,"column":580}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":167,"column":0},"generated":{"line":1,"column":585}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":167,"column":0},"generated":{"line":1,"column":596}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":167,"column":0},"generated":{"line":1,"column":601}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":167,"column":0},"generated":{"line":1,"column":607}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":167,"column":0},"generated":{"line":1,"column":613}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":167,"column":0},"generated":{"line":1,"column":618}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":167,"column":0},"generated":{"line":1,"column":624}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":179,"column":0},"generated":{"line":1,"column":631}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":179,"column":0},"generated":{"line":1,"column":636}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":179,"column":0},"generated":{"line":1,"column":649}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":191,"column":0},"generated":{"line":1,"column":651}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":191,"column":0},"generated":{"line":1,"column":656}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":191,"column":0},"generated":{"line":1,"column":669}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":210,"column":0},"generated":{"line":1,"column":671}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":210,"column":0},"generated":{"line":1,"column":676}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":210,"column":0},"generated":{"line":1,"column":689}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":210,"column":0},"generated":{"line":1,"column":691}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":233,"column":0},"generated":{"line":1,"column":701}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":233,"column":0},"generated":{"line":1,"column":706}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":233,"column":0},"generated":{"line":1,"column":719}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":242,"column":0},"generated":{"line":1,"column":721}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":242,"column":0},"generated":{"line":1,"column":726}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":242,"column":0},"generated":{"line":1,"column":733}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":244,"column":0},"generated":{"line":1,"column":736}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":244,"column":0},"generated":{"line":1,"column":741}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":244,"column":0},"generated":{"line":1,"column":753}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":245,"column":0},"generated":{"line":1,"column":756}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":245,"column":0},"generated":{"line":1,"column":761}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":245,"column":0},"generated":{"line":1,"column":770}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":245,"column":0},"generated":{"line":1,"column":775}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":245,"column":0},"generated":{"line":1,"column":781}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":246,"column":0},"generated":{"line":1,"column":788}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":246,"column":0},"generated":{"line":1,"column":793}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":246,"column":0},"generated":{"line":1,"column":805}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":246,"column":0},"generated":{"line":1,"column":807}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":247,"column":0},"generated":{"line":1,"column":810}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":247,"column":0},"generated":{"line":1,"column":815}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":827}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":832}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":840}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":842}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":852}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":857}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":863}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":869}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":871}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":882}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":887}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":893}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":901}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":906}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":919}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":262,"column":0},"generated":{"line":1,"column":943}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":262,"column":0},"generated":{"line":1,"column":955}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":262,"column":0},"generated":{"line":1,"column":964}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":264,"column":0},"generated":{"line":1,"column":967}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":264,"column":0},"generated":{"line":1,"column":971}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":264,"column":0},"generated":{"line":1,"column":973}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":265,"column":0},"generated":{"line":1,"column":976}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":265,"column":0},"generated":{"line":1,"column":978}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":266,"column":0},"generated":{"line":1,"column":981}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":266,"column":0},"generated":{"line":1,"column":983}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":266,"column":0},"generated":{"line":1,"column":988}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":268,"column":0},"generated":{"line":1,"column":996}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":268,"column":0},"generated":{"line":1,"column":1002}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":268,"column":0},"generated":{"line":1,"column":1010}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":270,"column":0},"generated":{"line":1,"column":1015}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":270,"column":0},"generated":{"line":1,"column":1017}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":270,"column":0},"generated":{"line":1,"column":1018}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":273,"column":0},"generated":{"line":1,"column":1022}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":273,"column":0},"generated":{"line":1,"column":1026}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":273,"column":0},"generated":{"line":1,"column":1030}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":273,"column":0},"generated":{"line":1,"column":1032}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":273,"column":0},"generated":{"line":1,"column":1034}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":273,"column":0},"generated":{"line":1,"column":1036}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":273,"column":0},"generated":{"line":1,"column":1038}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":273,"column":0},"generated":{"line":1,"column":1045}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":274,"column":0},"generated":{"line":1,"column":1049}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1050}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1054}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1056}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1058}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":282,"column":0},"generated":{"line":1,"column":1061}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":277,"column":0},"generated":{"line":1,"column":1064}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":277,"column":0},"generated":{"line":1,"column":1081}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":279,"column":0},"generated":{"line":1,"column":1085}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":279,"column":0},"generated":{"line":1,"column":1087}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":279,"column":0},"generated":{"line":1,"column":1089}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":279,"column":0},"generated":{"line":1,"column":1100}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":282,"column":0},"generated":{"line":1,"column":1104}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":283,"column":0},"generated":{"line":1,"column":1106}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":284,"column":0},"generated":{"line":1,"column":1107}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":284,"column":0},"generated":{"line":1,"column":1109}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":284,"column":0},"generated":{"line":1,"column":1114}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1117}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":286,"column":0},"generated":{"line":1,"column":1121}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":286,"column":0},"generated":{"line":1,"column":1125}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":286,"column":0},"generated":{"line":1,"column":1127}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":286,"column":0},"generated":{"line":1,"column":1129}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1138}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1140}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1142}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1144}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1146}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1152}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1156}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1158}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1160}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1163}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":295,"column":0},"generated":{"line":1,"column":1166}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":295,"column":0},"generated":{"line":1,"column":1171}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":295,"column":0},"generated":{"line":1,"column":1178}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":296,"column":0},"generated":{"line":1,"column":1180}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":296,"column":0},"generated":{"line":1,"column":1185}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":296,"column":0},"generated":{"line":1,"column":1193}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":324,"column":0},"generated":{"line":1,"column":1196}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":324,"column":0},"generated":{"line":1,"column":1211}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":324,"column":0},"generated":{"line":1,"column":1220}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":338,"column":0},"generated":{"line":1,"column":1223}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":328,"column":0},"generated":{"line":1,"column":1229}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":328,"column":0},"generated":{"line":1,"column":1246}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":330,"column":0},"generated":{"line":1,"column":1250}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":326,"column":0},"generated":{"line":1,"column":1252}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":326,"column":0},"generated":{"line":1,"column":1253}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":326,"column":0},"generated":{"line":1,"column":1266}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":326,"column":0},"generated":{"line":1,"column":1278}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":326,"column":0},"generated":{"line":1,"column":1289}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":330,"column":0},"generated":{"line":1,"column":1300}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":330,"column":0},"generated":{"line":1,"column":1308}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":333,"column":0},"generated":{"line":1,"column":1312}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":333,"column":0},"generated":{"line":1,"column":1315}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":333,"column":0},"generated":{"line":1,"column":1318}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":333,"column":0},"generated":{"line":1,"column":1320}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1324}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1329}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1342}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":338,"column":0},"generated":{"line":1,"column":1345}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":354,"column":0},"generated":{"line":1,"column":1351}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":354,"column":0},"generated":{"line":1,"column":1368}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":354,"column":0},"generated":{"line":1,"column":1377}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":354,"column":0},"generated":{"line":1,"column":1379}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":1,"column":1382}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":1,"column":1389}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":1,"column":1391}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":1,"column":1408}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":1,"column":1410}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":1,"column":1412}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":1,"column":1417}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":1,"column":1424}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":376,"column":0},"generated":{"line":1,"column":1430}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":376,"column":0},"generated":{"line":1,"column":1451}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":376,"column":0},"generated":{"line":1,"column":1460}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":376,"column":0},"generated":{"line":1,"column":1462}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":376,"column":0},"generated":{"line":1,"column":1464}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":376,"column":0},"generated":{"line":1,"column":1466}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1469}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1476}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1478}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1499}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1501}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1503}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1505}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1507}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1512}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1519}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":403,"column":0},"generated":{"line":1,"column":1525}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":403,"column":0},"generated":{"line":1,"column":1541}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":403,"column":0},"generated":{"line":1,"column":1550}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":403,"column":0},"generated":{"line":1,"column":1552}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":403,"column":0},"generated":{"line":1,"column":1554}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":403,"column":0},"generated":{"line":1,"column":1556}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":403,"column":0},"generated":{"line":1,"column":1558}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1561}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1568}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1570}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1586}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1588}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1590}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1592}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1594}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1596}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1601}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":419,"column":0},"generated":{"line":1,"column":1609}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":419,"column":0},"generated":{"line":1,"column":1614}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":419,"column":0},"generated":{"line":1,"column":1623}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1626}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1633}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1638}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1651}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1656}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1662}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1664}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1669}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1681}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1686}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":442,"column":0},"generated":{"line":1,"column":1701}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":442,"column":0},"generated":{"line":1,"column":1706}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":442,"column":0},"generated":{"line":1,"column":1715}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":442,"column":0},"generated":{"line":1,"column":1717}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":442,"column":0},"generated":{"line":1,"column":1719}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":442,"column":0},"generated":{"line":1,"column":1721}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":442,"column":0},"generated":{"line":1,"column":1723}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":442,"column":0},"generated":{"line":1,"column":1725}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":442,"column":0},"generated":{"line":1,"column":1727}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1730}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1737}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1739}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1744}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1746}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1748}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1750}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1752}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1754}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1756}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1758}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1763}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1770}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":457,"column":0},"generated":{"line":1,"column":1776}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":457,"column":0},"generated":{"line":1,"column":1784}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":457,"column":0},"generated":{"line":1,"column":1793}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":459,"column":0},"generated":{"line":1,"column":1801}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":459,"column":0},"generated":{"line":1,"column":1805}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":459,"column":0},"generated":{"line":1,"column":1809}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":459,"column":0},"generated":{"line":1,"column":1812}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":461,"column":0},"generated":{"line":1,"column":1815}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":461,"column":0},"generated":{"line":1,"column":1820}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":468,"column":0},"generated":{"line":1,"column":1830}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":468,"column":0},"generated":{"line":1,"column":1835}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":468,"column":0},"generated":{"line":1,"column":1841}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":468,"column":0},"generated":{"line":1,"column":1856}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":470,"column":0},"generated":{"line":1,"column":1863}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":470,"column":0},"generated":{"line":1,"column":1868}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":470,"column":0},"generated":{"line":1,"column":1874}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":470,"column":0},"generated":{"line":1,"column":1892}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":473,"column":0},"generated":{"line":1,"column":1895}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":475,"column":0},"generated":{"line":1,"column":1898}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":475,"column":0},"generated":{"line":1,"column":1903}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":475,"column":0},"generated":{"line":1,"column":1911}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":475,"column":0},"generated":{"line":1,"column":1923}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":478,"column":0},"generated":{"line":1,"column":1929}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":478,"column":0},"generated":{"line":1,"column":1934}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":478,"column":0},"generated":{"line":1,"column":1947}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":479,"column":0},"generated":{"line":1,"column":1949}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":479,"column":0},"generated":{"line":1,"column":1954}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":479,"column":0},"generated":{"line":1,"column":1965}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":480,"column":0},"generated":{"line":1,"column":1967}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":480,"column":0},"generated":{"line":1,"column":1972}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":480,"column":0},"generated":{"line":1,"column":1984}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":480,"column":0},"generated":{"line":1,"column":1991}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":481,"column":0},"generated":{"line":1,"column":1993}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":481,"column":0},"generated":{"line":1,"column":1998}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":481,"column":0},"generated":{"line":1,"column":2011}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":483,"column":0},"generated":{"line":1,"column":2016}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":483,"column":0},"generated":{"line":1,"column":2021}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":483,"column":0},"generated":{"line":1,"column":2028}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":484,"column":0},"generated":{"line":1,"column":2031}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":484,"column":0},"generated":{"line":1,"column":2036}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":484,"column":0},"generated":{"line":1,"column":2044}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":486,"column":0},"generated":{"line":1,"column":2047}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":486,"column":0},"generated":{"line":1,"column":2049}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":486,"column":0},"generated":{"line":1,"column":2059}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":486,"column":0},"generated":{"line":1,"column":2067}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":486,"column":0},"generated":{"line":1,"column":2072}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":506,"column":0},"generated":{"line":1,"column":2080}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":506,"column":0},"generated":{"line":1,"column":2085}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":506,"column":0},"generated":{"line":1,"column":2094}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":506,"column":0},"generated":{"line":1,"column":2096}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":506,"column":0},"generated":{"line":1,"column":2098}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":506,"column":0},"generated":{"line":1,"column":2100}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":506,"column":0},"generated":{"line":1,"column":2102}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":506,"column":0},"generated":{"line":1,"column":2104}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":510,"column":0},"generated":{"line":1,"column":2107}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":508,"column":0},"generated":{"line":1,"column":2114}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":508,"column":0},"generated":{"line":1,"column":2116}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":508,"column":0},"generated":{"line":1,"column":2121}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":508,"column":0},"generated":{"line":1,"column":2123}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":508,"column":0},"generated":{"line":1,"column":2125}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":508,"column":0},"generated":{"line":1,"column":2127}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":508,"column":0},"generated":{"line":1,"column":2129}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":508,"column":0},"generated":{"line":1,"column":2131}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":508,"column":0},"generated":{"line":1,"column":2133}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":508,"column":0},"generated":{"line":1,"column":2138}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":510,"column":0},"generated":{"line":1,"column":2145}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":533,"column":0},"generated":{"line":1,"column":2151}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":533,"column":0},"generated":{"line":1,"column":2163}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":533,"column":0},"generated":{"line":1,"column":2172}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":533,"column":0},"generated":{"line":1,"column":2174}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":533,"column":0},"generated":{"line":1,"column":2176}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":533,"column":0},"generated":{"line":1,"column":2178}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":533,"column":0},"generated":{"line":1,"column":2180}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":533,"column":0},"generated":{"line":1,"column":2182}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":533,"column":0},"generated":{"line":1,"column":2184}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":535,"column":0},"generated":{"line":1,"column":2187}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":535,"column":0},"generated":{"line":1,"column":2194}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":535,"column":0},"generated":{"line":1,"column":2196}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":535,"column":0},"generated":{"line":1,"column":2208}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":535,"column":0},"generated":{"line":1,"column":2210}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":535,"column":0},"generated":{"line":1,"column":2212}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":535,"column":0},"generated":{"line":1,"column":2214}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":535,"column":0},"generated":{"line":1,"column":2216}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":535,"column":0},"generated":{"line":1,"column":2218}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":535,"column":0},"generated":{"line":1,"column":2220}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":535,"column":0},"generated":{"line":1,"column":2222}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":535,"column":0},"generated":{"line":1,"column":2227}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":555,"column":0},"generated":{"line":1,"column":2235}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":555,"column":0},"generated":{"line":1,"column":2247}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":555,"column":0},"generated":{"line":1,"column":2256}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":555,"column":0},"generated":{"line":1,"column":2258}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":555,"column":0},"generated":{"line":1,"column":2260}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":557,"column":0},"generated":{"line":1,"column":2263}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":557,"column":0},"generated":{"line":1,"column":2270}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":557,"column":0},"generated":{"line":1,"column":2272}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":557,"column":0},"generated":{"line":1,"column":2284}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":557,"column":0},"generated":{"line":1,"column":2286}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":557,"column":0},"generated":{"line":1,"column":2288}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":557,"column":0},"generated":{"line":1,"column":2290}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":557,"column":0},"generated":{"line":1,"column":2295}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":578,"column":0},"generated":{"line":1,"column":2303}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":578,"column":0},"generated":{"line":1,"column":2312}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":578,"column":0},"generated":{"line":1,"column":2321}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":578,"column":0},"generated":{"line":1,"column":2323}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":578,"column":0},"generated":{"line":1,"column":2325}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":578,"column":0},"generated":{"line":1,"column":2327}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":578,"column":0},"generated":{"line":1,"column":2329}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":578,"column":0},"generated":{"line":1,"column":2331}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":578,"column":0},"generated":{"line":1,"column":2333}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":580,"column":0},"generated":{"line":1,"column":2336}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":580,"column":0},"generated":{"line":1,"column":2343}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":580,"column":0},"generated":{"line":1,"column":2345}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":580,"column":0},"generated":{"line":1,"column":2354}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":580,"column":0},"generated":{"line":1,"column":2356}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":580,"column":0},"generated":{"line":1,"column":2358}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":580,"column":0},"generated":{"line":1,"column":2360}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":580,"column":0},"generated":{"line":1,"column":2362}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":580,"column":0},"generated":{"line":1,"column":2364}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":580,"column":0},"generated":{"line":1,"column":2366}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":580,"column":0},"generated":{"line":1,"column":2368}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":580,"column":0},"generated":{"line":1,"column":2373}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":600,"column":0},"generated":{"line":1,"column":2381}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":600,"column":0},"generated":{"line":1,"column":2393}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":600,"column":0},"generated":{"line":1,"column":2402}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":600,"column":0},"generated":{"line":1,"column":2404}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":600,"column":0},"generated":{"line":1,"column":2406}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":600,"column":0},"generated":{"line":1,"column":2408}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":600,"column":0},"generated":{"line":1,"column":2410}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":600,"column":0},"generated":{"line":1,"column":2412}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":600,"column":0},"generated":{"line":1,"column":2414}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":604,"column":0},"generated":{"line":1,"column":2417}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":602,"column":0},"generated":{"line":1,"column":2424}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":602,"column":0},"generated":{"line":1,"column":2426}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":602,"column":0},"generated":{"line":1,"column":2438}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":602,"column":0},"generated":{"line":1,"column":2440}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":602,"column":0},"generated":{"line":1,"column":2442}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":602,"column":0},"generated":{"line":1,"column":2444}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":602,"column":0},"generated":{"line":1,"column":2446}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":602,"column":0},"generated":{"line":1,"column":2448}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":602,"column":0},"generated":{"line":1,"column":2450}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":602,"column":0},"generated":{"line":1,"column":2452}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":602,"column":0},"generated":{"line":1,"column":2457}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":604,"column":0},"generated":{"line":1,"column":2464}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":619,"column":0},"generated":{"line":1,"column":2470}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":619,"column":0},"generated":{"line":1,"column":2480}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":619,"column":0},"generated":{"line":1,"column":2489}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":619,"column":0},"generated":{"line":1,"column":2491}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":619,"column":0},"generated":{"line":1,"column":2493}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":621,"column":0},"generated":{"line":1,"column":2496}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":621,"column":0},"generated":{"line":1,"column":2503}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":621,"column":0},"generated":{"line":1,"column":2505}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":621,"column":0},"generated":{"line":1,"column":2515}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":621,"column":0},"generated":{"line":1,"column":2517}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":621,"column":0},"generated":{"line":1,"column":2519}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":621,"column":0},"generated":{"line":1,"column":2521}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":621,"column":0},"generated":{"line":1,"column":2526}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":638,"column":0},"generated":{"line":1,"column":2534}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":638,"column":0},"generated":{"line":1,"column":2551}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":638,"column":0},"generated":{"line":1,"column":2560}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":638,"column":0},"generated":{"line":1,"column":2562}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":638,"column":0},"generated":{"line":1,"column":2564}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":638,"column":0},"generated":{"line":1,"column":2566}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":640,"column":0},"generated":{"line":1,"column":2569}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":640,"column":0},"generated":{"line":1,"column":2576}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":640,"column":0},"generated":{"line":1,"column":2578}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":640,"column":0},"generated":{"line":1,"column":2595}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":640,"column":0},"generated":{"line":1,"column":2597}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":640,"column":0},"generated":{"line":1,"column":2599}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":640,"column":0},"generated":{"line":1,"column":2601}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":640,"column":0},"generated":{"line":1,"column":2603}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":640,"column":0},"generated":{"line":1,"column":2608}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":657,"column":0},"generated":{"line":1,"column":2616}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":657,"column":0},"generated":{"line":1,"column":2631}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":657,"column":0},"generated":{"line":1,"column":2640}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":657,"column":0},"generated":{"line":1,"column":2642}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":657,"column":0},"generated":{"line":1,"column":2644}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":657,"column":0},"generated":{"line":1,"column":2646}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":657,"column":0},"generated":{"line":1,"column":2648}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":659,"column":0},"generated":{"line":1,"column":2651}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":659,"column":0},"generated":{"line":1,"column":2658}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":659,"column":0},"generated":{"line":1,"column":2660}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":659,"column":0},"generated":{"line":1,"column":2675}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":659,"column":0},"generated":{"line":1,"column":2677}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":659,"column":0},"generated":{"line":1,"column":2679}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":659,"column":0},"generated":{"line":1,"column":2681}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":659,"column":0},"generated":{"line":1,"column":2683}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":659,"column":0},"generated":{"line":1,"column":2685}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":659,"column":0},"generated":{"line":1,"column":2690}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2698}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2718}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2727}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2729}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":1,"column":2731}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":677,"column":0},"generated":{"line":1,"column":2734}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":677,"column":0},"generated":{"line":1,"column":2741}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":677,"column":0},"generated":{"line":1,"column":2743}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":677,"column":0},"generated":{"line":1,"column":2763}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":677,"column":0},"generated":{"line":1,"column":2765}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":677,"column":0},"generated":{"line":1,"column":2767}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":677,"column":0},"generated":{"line":1,"column":2769}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":677,"column":0},"generated":{"line":1,"column":2774}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":695,"column":0},"generated":{"line":1,"column":2782}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":695,"column":0},"generated":{"line":1,"column":2804}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":695,"column":0},"generated":{"line":1,"column":2813}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":695,"column":0},"generated":{"line":1,"column":2815}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":695,"column":0},"generated":{"line":1,"column":2817}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":695,"column":0},"generated":{"line":1,"column":2819}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":695,"column":0},"generated":{"line":1,"column":2821}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":695,"column":0},"generated":{"line":1,"column":2823}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":697,"column":0},"generated":{"line":1,"column":2826}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":697,"column":0},"generated":{"line":1,"column":2833}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":697,"column":0},"generated":{"line":1,"column":2835}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":697,"column":0},"generated":{"line":1,"column":2857}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":697,"column":0},"generated":{"line":1,"column":2859}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":697,"column":0},"generated":{"line":1,"column":2861}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":697,"column":0},"generated":{"line":1,"column":2863}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":697,"column":0},"generated":{"line":1,"column":2865}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":697,"column":0},"generated":{"line":1,"column":2867}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":697,"column":0},"generated":{"line":1,"column":2869}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":697,"column":0},"generated":{"line":1,"column":2874}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":712,"column":0},"generated":{"line":1,"column":2882}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":712,"column":0},"generated":{"line":1,"column":2892}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":712,"column":0},"generated":{"line":1,"column":2901}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":712,"column":0},"generated":{"line":1,"column":2903}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":714,"column":0},"generated":{"line":1,"column":2906}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":714,"column":0},"generated":{"line":1,"column":2913}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":714,"column":0},"generated":{"line":1,"column":2915}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":714,"column":0},"generated":{"line":1,"column":2925}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":714,"column":0},"generated":{"line":1,"column":2927}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":714,"column":0},"generated":{"line":1,"column":2929}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":714,"column":0},"generated":{"line":1,"column":2934}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":730,"column":0},"generated":{"line":1,"column":2942}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":730,"column":0},"generated":{"line":1,"column":2959}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":730,"column":0},"generated":{"line":1,"column":2968}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":730,"column":0},"generated":{"line":1,"column":2970}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":730,"column":0},"generated":{"line":1,"column":2972}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":732,"column":0},"generated":{"line":1,"column":2975}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":732,"column":0},"generated":{"line":1,"column":2982}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":732,"column":0},"generated":{"line":1,"column":2984}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":732,"column":0},"generated":{"line":1,"column":3001}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":732,"column":0},"generated":{"line":1,"column":3003}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":732,"column":0},"generated":{"line":1,"column":3005}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":732,"column":0},"generated":{"line":1,"column":3007}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":732,"column":0},"generated":{"line":1,"column":3012}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":751,"column":0},"generated":{"line":1,"column":3020}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":751,"column":0},"generated":{"line":1,"column":3030}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":751,"column":0},"generated":{"line":1,"column":3039}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":751,"column":0},"generated":{"line":1,"column":3041}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":751,"column":0},"generated":{"line":1,"column":3043}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":751,"column":0},"generated":{"line":1,"column":3045}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":753,"column":0},"generated":{"line":1,"column":3048}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":753,"column":0},"generated":{"line":1,"column":3055}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":753,"column":0},"generated":{"line":1,"column":3057}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":753,"column":0},"generated":{"line":1,"column":3067}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":753,"column":0},"generated":{"line":1,"column":3069}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":753,"column":0},"generated":{"line":1,"column":3071}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":753,"column":0},"generated":{"line":1,"column":3073}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":753,"column":0},"generated":{"line":1,"column":3075}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":753,"column":0},"generated":{"line":1,"column":3080}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":773,"column":0},"generated":{"line":1,"column":3088}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":773,"column":0},"generated":{"line":1,"column":3105}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":773,"column":0},"generated":{"line":1,"column":3114}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":773,"column":0},"generated":{"line":1,"column":3116}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":773,"column":0},"generated":{"line":1,"column":3118}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":773,"column":0},"generated":{"line":1,"column":3120}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":773,"column":0},"generated":{"line":1,"column":3122}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":775,"column":0},"generated":{"line":1,"column":3125}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":775,"column":0},"generated":{"line":1,"column":3132}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":775,"column":0},"generated":{"line":1,"column":3134}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":775,"column":0},"generated":{"line":1,"column":3151}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":775,"column":0},"generated":{"line":1,"column":3153}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":775,"column":0},"generated":{"line":1,"column":3155}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":775,"column":0},"generated":{"line":1,"column":3157}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":775,"column":0},"generated":{"line":1,"column":3159}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":775,"column":0},"generated":{"line":1,"column":3161}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":775,"column":0},"generated":{"line":1,"column":3166}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":795,"column":0},"generated":{"line":1,"column":3174}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":795,"column":0},"generated":{"line":1,"column":3185}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":795,"column":0},"generated":{"line":1,"column":3194}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":795,"column":0},"generated":{"line":1,"column":3196}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":795,"column":0},"generated":{"line":1,"column":3198}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":795,"column":0},"generated":{"line":1,"column":3200}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":799,"column":0},"generated":{"line":1,"column":3203}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":797,"column":0},"generated":{"line":1,"column":3210}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":797,"column":0},"generated":{"line":1,"column":3212}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":797,"column":0},"generated":{"line":1,"column":3223}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":797,"column":0},"generated":{"line":1,"column":3225}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":797,"column":0},"generated":{"line":1,"column":3227}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":797,"column":0},"generated":{"line":1,"column":3229}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":797,"column":0},"generated":{"line":1,"column":3231}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":797,"column":0},"generated":{"line":1,"column":3236}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":799,"column":0},"generated":{"line":1,"column":3243}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":820,"column":0},"generated":{"line":1,"column":3249}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":820,"column":0},"generated":{"line":1,"column":3259}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":820,"column":0},"generated":{"line":1,"column":3268}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":820,"column":0},"generated":{"line":1,"column":3270}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":820,"column":0},"generated":{"line":1,"column":3272}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":820,"column":0},"generated":{"line":1,"column":3274}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":820,"column":0},"generated":{"line":1,"column":3276}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":824,"column":0},"generated":{"line":1,"column":3279}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":822,"column":0},"generated":{"line":1,"column":3286}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":822,"column":0},"generated":{"line":1,"column":3288}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":822,"column":0},"generated":{"line":1,"column":3298}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":822,"column":0},"generated":{"line":1,"column":3300}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":822,"column":0},"generated":{"line":1,"column":3302}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":822,"column":0},"generated":{"line":1,"column":3304}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":822,"column":0},"generated":{"line":1,"column":3306}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":822,"column":0},"generated":{"line":1,"column":3308}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":822,"column":0},"generated":{"line":1,"column":3313}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":824,"column":0},"generated":{"line":1,"column":3320}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":841,"column":0},"generated":{"line":1,"column":3326}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":841,"column":0},"generated":{"line":1,"column":3339}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":841,"column":0},"generated":{"line":1,"column":3348}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":841,"column":0},"generated":{"line":1,"column":3350}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":841,"column":0},"generated":{"line":1,"column":3352}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":841,"column":0},"generated":{"line":1,"column":3354}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":843,"column":0},"generated":{"line":1,"column":3357}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":843,"column":0},"generated":{"line":1,"column":3364}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":843,"column":0},"generated":{"line":1,"column":3366}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":843,"column":0},"generated":{"line":1,"column":3379}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":843,"column":0},"generated":{"line":1,"column":3381}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":843,"column":0},"generated":{"line":1,"column":3383}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":843,"column":0},"generated":{"line":1,"column":3385}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":843,"column":0},"generated":{"line":1,"column":3387}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":843,"column":0},"generated":{"line":1,"column":3392}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":861,"column":0},"generated":{"line":1,"column":3400}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":861,"column":0},"generated":{"line":1,"column":3420}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":861,"column":0},"generated":{"line":1,"column":3429}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":861,"column":0},"generated":{"line":1,"column":3431}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":861,"column":0},"generated":{"line":1,"column":3433}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":861,"column":0},"generated":{"line":1,"column":3435}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":861,"column":0},"generated":{"line":1,"column":3437}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":863,"column":0},"generated":{"line":1,"column":3440}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":863,"column":0},"generated":{"line":1,"column":3447}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":863,"column":0},"generated":{"line":1,"column":3449}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":863,"column":0},"generated":{"line":1,"column":3469}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":863,"column":0},"generated":{"line":1,"column":3471}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":863,"column":0},"generated":{"line":1,"column":3473}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":863,"column":0},"generated":{"line":1,"column":3475}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":863,"column":0},"generated":{"line":1,"column":3477}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":863,"column":0},"generated":{"line":1,"column":3479}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":863,"column":0},"generated":{"line":1,"column":3484}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":880,"column":0},"generated":{"line":1,"column":3492}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":880,"column":0},"generated":{"line":1,"column":3504}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":880,"column":0},"generated":{"line":1,"column":3513}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":880,"column":0},"generated":{"line":1,"column":3515}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":884,"column":0},"generated":{"line":1,"column":3518}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":882,"column":0},"generated":{"line":1,"column":3525}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":882,"column":0},"generated":{"line":1,"column":3527}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":882,"column":0},"generated":{"line":1,"column":3539}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":882,"column":0},"generated":{"line":1,"column":3541}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":882,"column":0},"generated":{"line":1,"column":3543}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":882,"column":0},"generated":{"line":1,"column":3548}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":884,"column":0},"generated":{"line":1,"column":3555}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":904,"column":0},"generated":{"line":1,"column":3561}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":904,"column":0},"generated":{"line":1,"column":3576}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":904,"column":0},"generated":{"line":1,"column":3585}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":904,"column":0},"generated":{"line":1,"column":3587}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":904,"column":0},"generated":{"line":1,"column":3589}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":904,"column":0},"generated":{"line":1,"column":3591}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":904,"column":0},"generated":{"line":1,"column":3593}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":904,"column":0},"generated":{"line":1,"column":3595}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":908,"column":0},"generated":{"line":1,"column":3598}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":906,"column":0},"generated":{"line":1,"column":3605}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":906,"column":0},"generated":{"line":1,"column":3607}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":906,"column":0},"generated":{"line":1,"column":3622}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":906,"column":0},"generated":{"line":1,"column":3624}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":906,"column":0},"generated":{"line":1,"column":3626}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":906,"column":0},"generated":{"line":1,"column":3628}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":906,"column":0},"generated":{"line":1,"column":3630}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":906,"column":0},"generated":{"line":1,"column":3632}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":906,"column":0},"generated":{"line":1,"column":3634}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":906,"column":0},"generated":{"line":1,"column":3639}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":908,"column":0},"generated":{"line":1,"column":3646}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":924,"column":0},"generated":{"line":1,"column":3652}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":924,"column":0},"generated":{"line":1,"column":3664}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":924,"column":0},"generated":{"line":1,"column":3673}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":930,"column":0},"generated":{"line":1,"column":3676}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":926,"column":0},"generated":{"line":1,"column":3688}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":926,"column":0},"generated":{"line":1,"column":3692}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":926,"column":0},"generated":{"line":1,"column":3696}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":926,"column":0},"generated":{"line":1,"column":3699}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":928,"column":0},"generated":{"line":1,"column":3702}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":928,"column":0},"generated":{"line":1,"column":3707}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":928,"column":0},"generated":{"line":1,"column":3716}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":930,"column":0},"generated":{"line":1,"column":3718}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":948,"column":0},"generated":{"line":1,"column":3724}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":948,"column":0},"generated":{"line":1,"column":3739}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":948,"column":0},"generated":{"line":1,"column":3748}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":948,"column":0},"generated":{"line":1,"column":3750}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":956,"column":0},"generated":{"line":1,"column":3753}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":950,"column":0},"generated":{"line":1,"column":3765}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":950,"column":0},"generated":{"line":1,"column":3769}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":950,"column":0},"generated":{"line":1,"column":3773}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":950,"column":0},"generated":{"line":1,"column":3775}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":951,"column":0},"generated":{"line":1,"column":3783}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":951,"column":0},"generated":{"line":1,"column":3787}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":951,"column":0},"generated":{"line":1,"column":3791}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":951,"column":0},"generated":{"line":1,"column":3793}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":953,"column":0},"generated":{"line":1,"column":3796}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":953,"column":0},"generated":{"line":1,"column":3801}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":953,"column":0},"generated":{"line":1,"column":3814}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":954,"column":0},"generated":{"line":1,"column":3816}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":954,"column":0},"generated":{"line":1,"column":3821}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":954,"column":0},"generated":{"line":1,"column":3834}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":956,"column":0},"generated":{"line":1,"column":3836}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":977,"column":0},"generated":{"line":1,"column":3842}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":977,"column":0},"generated":{"line":1,"column":3855}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":977,"column":0},"generated":{"line":1,"column":3864}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":977,"column":0},"generated":{"line":1,"column":3866}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":977,"column":0},"generated":{"line":1,"column":3868}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":977,"column":0},"generated":{"line":1,"column":3870}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":981,"column":0},"generated":{"line":1,"column":3873}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":979,"column":0},"generated":{"line":1,"column":3880}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":979,"column":0},"generated":{"line":1,"column":3882}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":979,"column":0},"generated":{"line":1,"column":3895}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":979,"column":0},"generated":{"line":1,"column":3897}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":979,"column":0},"generated":{"line":1,"column":3899}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":979,"column":0},"generated":{"line":1,"column":3901}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":979,"column":0},"generated":{"line":1,"column":3906}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":979,"column":0},"generated":{"line":1,"column":3912}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":981,"column":0},"generated":{"line":1,"column":3915}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1000,"column":0},"generated":{"line":1,"column":3921}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1000,"column":0},"generated":{"line":1,"column":3941}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1000,"column":0},"generated":{"line":1,"column":3950}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1000,"column":0},"generated":{"line":1,"column":3952}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1000,"column":0},"generated":{"line":1,"column":3954}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1000,"column":0},"generated":{"line":1,"column":3956}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1004,"column":0},"generated":{"line":1,"column":3959}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1002,"column":0},"generated":{"line":1,"column":3966}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1002,"column":0},"generated":{"line":1,"column":3968}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1002,"column":0},"generated":{"line":1,"column":3988}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1002,"column":0},"generated":{"line":1,"column":3990}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1002,"column":0},"generated":{"line":1,"column":3992}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1002,"column":0},"generated":{"line":1,"column":3994}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1002,"column":0},"generated":{"line":1,"column":3996}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1002,"column":0},"generated":{"line":1,"column":4001}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1004,"column":0},"generated":{"line":1,"column":4008}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1025,"column":0},"generated":{"line":1,"column":4014}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1025,"column":0},"generated":{"line":1,"column":4037}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1025,"column":0},"generated":{"line":1,"column":4046}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1025,"column":0},"generated":{"line":1,"column":4048}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1025,"column":0},"generated":{"line":1,"column":4050}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1029,"column":0},"generated":{"line":1,"column":4053}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1027,"column":0},"generated":{"line":1,"column":4060}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1027,"column":0},"generated":{"line":1,"column":4062}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1027,"column":0},"generated":{"line":1,"column":4085}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1027,"column":0},"generated":{"line":1,"column":4087}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1027,"column":0},"generated":{"line":1,"column":4089}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1027,"column":0},"generated":{"line":1,"column":4091}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1027,"column":0},"generated":{"line":1,"column":4096}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1029,"column":0},"generated":{"line":1,"column":4103}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1046,"column":0},"generated":{"line":1,"column":4109}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1046,"column":0},"generated":{"line":1,"column":4133}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1046,"column":0},"generated":{"line":1,"column":4142}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1046,"column":0},"generated":{"line":1,"column":4144}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1046,"column":0},"generated":{"line":1,"column":4146}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1050,"column":0},"generated":{"line":1,"column":4149}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1048,"column":0},"generated":{"line":1,"column":4156}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1048,"column":0},"generated":{"line":1,"column":4158}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1048,"column":0},"generated":{"line":1,"column":4182}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1048,"column":0},"generated":{"line":1,"column":4184}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1048,"column":0},"generated":{"line":1,"column":4186}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1048,"column":0},"generated":{"line":1,"column":4188}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1048,"column":0},"generated":{"line":1,"column":4193}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1050,"column":0},"generated":{"line":1,"column":4200}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1067,"column":0},"generated":{"line":1,"column":4206}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1067,"column":0},"generated":{"line":1,"column":4237}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1067,"column":0},"generated":{"line":1,"column":4246}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1067,"column":0},"generated":{"line":1,"column":4248}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1071,"column":0},"generated":{"line":1,"column":4251}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1069,"column":0},"generated":{"line":1,"column":4258}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1069,"column":0},"generated":{"line":1,"column":4260}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1069,"column":0},"generated":{"line":1,"column":4291}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1069,"column":0},"generated":{"line":1,"column":4293}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1069,"column":0},"generated":{"line":1,"column":4295}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1069,"column":0},"generated":{"line":1,"column":4300}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1071,"column":0},"generated":{"line":1,"column":4307}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1089,"column":0},"generated":{"line":1,"column":4313}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1089,"column":0},"generated":{"line":1,"column":4334}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1089,"column":0},"generated":{"line":1,"column":4343}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1089,"column":0},"generated":{"line":1,"column":4345}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1089,"column":0},"generated":{"line":1,"column":4347}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1093,"column":0},"generated":{"line":1,"column":4350}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1091,"column":0},"generated":{"line":1,"column":4357}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1091,"column":0},"generated":{"line":1,"column":4359}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1091,"column":0},"generated":{"line":1,"column":4380}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1091,"column":0},"generated":{"line":1,"column":4382}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1091,"column":0},"generated":{"line":1,"column":4384}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1091,"column":0},"generated":{"line":1,"column":4386}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1091,"column":0},"generated":{"line":1,"column":4391}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1093,"column":0},"generated":{"line":1,"column":4398}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1113,"column":0},"generated":{"line":1,"column":4404}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1113,"column":0},"generated":{"line":1,"column":4428}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1113,"column":0},"generated":{"line":1,"column":4437}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1113,"column":0},"generated":{"line":1,"column":4439}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1113,"column":0},"generated":{"line":1,"column":4441}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1113,"column":0},"generated":{"line":1,"column":4443}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1113,"column":0},"generated":{"line":1,"column":4445}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1113,"column":0},"generated":{"line":1,"column":4447}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1117,"column":0},"generated":{"line":1,"column":4450}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1115,"column":0},"generated":{"line":1,"column":4457}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1115,"column":0},"generated":{"line":1,"column":4459}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1115,"column":0},"generated":{"line":1,"column":4483}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1115,"column":0},"generated":{"line":1,"column":4485}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1115,"column":0},"generated":{"line":1,"column":4487}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1115,"column":0},"generated":{"line":1,"column":4489}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1115,"column":0},"generated":{"line":1,"column":4491}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1115,"column":0},"generated":{"line":1,"column":4493}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1115,"column":0},"generated":{"line":1,"column":4495}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1115,"column":0},"generated":{"line":1,"column":4500}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1117,"column":0},"generated":{"line":1,"column":4507}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1136,"column":0},"generated":{"line":1,"column":4513}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1136,"column":0},"generated":{"line":1,"column":4521}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1136,"column":0},"generated":{"line":1,"column":4530}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1136,"column":0},"generated":{"line":1,"column":4532}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1136,"column":0},"generated":{"line":1,"column":4534}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1136,"column":0},"generated":{"line":1,"column":4536}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1140,"column":0},"generated":{"line":1,"column":4539}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1138,"column":0},"generated":{"line":1,"column":4546}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1138,"column":0},"generated":{"line":1,"column":4548}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1138,"column":0},"generated":{"line":1,"column":4556}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1138,"column":0},"generated":{"line":1,"column":4558}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1138,"column":0},"generated":{"line":1,"column":4560}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1138,"column":0},"generated":{"line":1,"column":4562}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1138,"column":0},"generated":{"line":1,"column":4564}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1138,"column":0},"generated":{"line":1,"column":4569}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1140,"column":0},"generated":{"line":1,"column":4576}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1160,"column":0},"generated":{"line":1,"column":4582}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1160,"column":0},"generated":{"line":1,"column":4594}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1160,"column":0},"generated":{"line":1,"column":4603}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1160,"column":0},"generated":{"line":1,"column":4605}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1160,"column":0},"generated":{"line":1,"column":4607}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1160,"column":0},"generated":{"line":1,"column":4609}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1160,"column":0},"generated":{"line":1,"column":4611}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1160,"column":0},"generated":{"line":1,"column":4613}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1164,"column":0},"generated":{"line":1,"column":4616}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1162,"column":0},"generated":{"line":1,"column":4623}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1162,"column":0},"generated":{"line":1,"column":4625}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1162,"column":0},"generated":{"line":1,"column":4637}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1162,"column":0},"generated":{"line":1,"column":4639}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1162,"column":0},"generated":{"line":1,"column":4641}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1162,"column":0},"generated":{"line":1,"column":4643}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1162,"column":0},"generated":{"line":1,"column":4645}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1162,"column":0},"generated":{"line":1,"column":4647}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1162,"column":0},"generated":{"line":1,"column":4649}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1162,"column":0},"generated":{"line":1,"column":4654}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1164,"column":0},"generated":{"line":1,"column":4661}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4667}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4680}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4689}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4691}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4694}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4701}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4703}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4716}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4718}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4720}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4725}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1196,"column":0},"generated":{"line":1,"column":4733}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1196,"column":0},"generated":{"line":1,"column":4746}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1196,"column":0},"generated":{"line":1,"column":4755}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1196,"column":0},"generated":{"line":1,"column":4757}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1198,"column":0},"generated":{"line":1,"column":4760}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1198,"column":0},"generated":{"line":1,"column":4767}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1198,"column":0},"generated":{"line":1,"column":4769}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1198,"column":0},"generated":{"line":1,"column":4782}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1198,"column":0},"generated":{"line":1,"column":4784}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1198,"column":0},"generated":{"line":1,"column":4786}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1198,"column":0},"generated":{"line":1,"column":4791}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1216,"column":0},"generated":{"line":1,"column":4799}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1216,"column":0},"generated":{"line":1,"column":4813}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1216,"column":0},"generated":{"line":1,"column":4822}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1216,"column":0},"generated":{"line":1,"column":4824}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1216,"column":0},"generated":{"line":1,"column":4826}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1216,"column":0},"generated":{"line":1,"column":4828}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1218,"column":0},"generated":{"line":1,"column":4831}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1218,"column":0},"generated":{"line":1,"column":4838}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1218,"column":0},"generated":{"line":1,"column":4840}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1218,"column":0},"generated":{"line":1,"column":4854}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1218,"column":0},"generated":{"line":1,"column":4856}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1218,"column":0},"generated":{"line":1,"column":4858}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1218,"column":0},"generated":{"line":1,"column":4860}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1218,"column":0},"generated":{"line":1,"column":4862}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1218,"column":0},"generated":{"line":1,"column":4867}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1249,"column":0},"generated":{"line":1,"column":4875}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1249,"column":0},"generated":{"line":1,"column":4893}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1249,"column":0},"generated":{"line":1,"column":4902}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1249,"column":0},"generated":{"line":1,"column":4904}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1249,"column":0},"generated":{"line":1,"column":4906}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1249,"column":0},"generated":{"line":1,"column":4908}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1249,"column":0},"generated":{"line":1,"column":4910}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1253,"column":0},"generated":{"line":1,"column":4913}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1251,"column":0},"generated":{"line":1,"column":4920}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1251,"column":0},"generated":{"line":1,"column":4922}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1251,"column":0},"generated":{"line":1,"column":4940}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1251,"column":0},"generated":{"line":1,"column":4942}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1251,"column":0},"generated":{"line":1,"column":4944}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1251,"column":0},"generated":{"line":1,"column":4946}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1251,"column":0},"generated":{"line":1,"column":4948}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1251,"column":0},"generated":{"line":1,"column":4950}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1251,"column":0},"generated":{"line":1,"column":4955}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1253,"column":0},"generated":{"line":1,"column":4962}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1269,"column":0},"generated":{"line":1,"column":4968}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1269,"column":0},"generated":{"line":1,"column":4981}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1269,"column":0},"generated":{"line":1,"column":4990}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1269,"column":0},"generated":{"line":1,"column":4992}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1269,"column":0},"generated":{"line":1,"column":4994}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1271,"column":0},"generated":{"line":1,"column":4997}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1271,"column":0},"generated":{"line":1,"column":5004}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1271,"column":0},"generated":{"line":1,"column":5006}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1271,"column":0},"generated":{"line":1,"column":5019}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1271,"column":0},"generated":{"line":1,"column":5021}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1271,"column":0},"generated":{"line":1,"column":5023}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1271,"column":0},"generated":{"line":1,"column":5025}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1271,"column":0},"generated":{"line":1,"column":5030}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1287,"column":0},"generated":{"line":1,"column":5038}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1287,"column":0},"generated":{"line":1,"column":5051}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1287,"column":0},"generated":{"line":1,"column":5060}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1287,"column":0},"generated":{"line":1,"column":5062}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1287,"column":0},"generated":{"line":1,"column":5064}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1289,"column":0},"generated":{"line":1,"column":5067}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1289,"column":0},"generated":{"line":1,"column":5074}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1289,"column":0},"generated":{"line":1,"column":5076}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1289,"column":0},"generated":{"line":1,"column":5089}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1289,"column":0},"generated":{"line":1,"column":5091}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1289,"column":0},"generated":{"line":1,"column":5093}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1289,"column":0},"generated":{"line":1,"column":5095}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1289,"column":0},"generated":{"line":1,"column":5100}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5108}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5122}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5131}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5133}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5135}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5137}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5139}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1310,"column":0},"generated":{"line":1,"column":5142}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1310,"column":0},"generated":{"line":1,"column":5149}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1310,"column":0},"generated":{"line":1,"column":5151}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1310,"column":0},"generated":{"line":1,"column":5165}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1310,"column":0},"generated":{"line":1,"column":5167}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1310,"column":0},"generated":{"line":1,"column":5169}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1310,"column":0},"generated":{"line":1,"column":5171}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1310,"column":0},"generated":{"line":1,"column":5173}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1310,"column":0},"generated":{"line":1,"column":5175}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1310,"column":0},"generated":{"line":1,"column":5180}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1315,"column":0},"generated":{"line":1,"column":5190}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1315,"column":0},"generated":{"line":1,"column":5197}},{"source":"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1315,"column":0},"generated":{"line":1,"column":5205}}],"sources":{"../node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../../gameobjects/components');\r\nvar DynamicTilemapLayerRender = require('./DynamicTilemapLayerRender');\r\nvar GameObject = require('../../gameobjects/GameObject');\r\nvar TilemapComponents = require('../components');\r\n\r\n/**\r\n * @classdesc\r\n * A Dynamic Tilemap Layer is a Game Object that renders LayerData from a Tilemap when used in combination\r\n * with one, or more, Tilesets.\r\n *\r\n * A Dynamic Tilemap Layer trades some speed for being able to apply powerful effects. Unlike a\r\n * Static Tilemap Layer, you can apply per-tile effects like tint or alpha, and you can change the\r\n * tiles in a DynamicTilemapLayer.\r\n * \r\n * Use this over a Static Tilemap Layer when you need those features.\r\n *\r\n * @class DynamicTilemapLayer\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.\r\n * @param {Phaser.Tilemaps.Tilemap} tilemap - The Tilemap this layer is a part of.\r\n * @param {integer} layerIndex - The index of the LayerData associated with this layer.\r\n * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n */\r\nvar DynamicTilemapLayer = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.ComputedSize,\r\n        Components.Depth,\r\n        Components.Flip,\r\n        Components.GetBounds,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Components.ScrollFactor,\r\n        DynamicTilemapLayerRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function DynamicTilemapLayer (scene, tilemap, layerIndex, tileset, x, y)\r\n    {\r\n        GameObject.call(this, scene, 'DynamicTilemapLayer');\r\n\r\n        /**\r\n         * Used internally by physics system to perform fast type checks.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#isTilemap\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.isTilemap = true;\r\n\r\n        /**\r\n         * The Tilemap that this layer is a part of.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilemap\r\n         * @type {Phaser.Tilemaps.Tilemap}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilemap = tilemap;\r\n\r\n        /**\r\n         * The index of the LayerData associated with this layer.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#layerIndex\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.layerIndex = layerIndex;\r\n\r\n        /**\r\n         * The LayerData associated with this layer. LayerData can only be associated with one\r\n         * tilemap layer.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#layer\r\n         * @type {Phaser.Tilemaps.LayerData}\r\n         * @since 3.0.0\r\n         */\r\n        this.layer = tilemap.layers[layerIndex];\r\n\r\n        // Link the LayerData with this static tilemap layer\r\n        this.layer.tilemapLayer = this;\r\n\r\n        /**\r\n         * The Tileset/s associated with this layer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array of Tileset objects, previously it was a single reference.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tileset\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileset = [];\r\n\r\n        /**\r\n         * Used internally with the canvas render. This holds the tiles that are visible within the\r\n         * camera.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#culledTiles\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.culledTiles = [];\r\n\r\n        /**\r\n         * You can control if the Cameras should cull tiles before rendering them or not.\r\n         * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n         *\r\n         * However, there are some instances when you may wish to disable this, and toggling this flag allows\r\n         * you to do so. Also see `setSkipCull` for a chainable method that does the same thing.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#skipCull\r\n         * @type {boolean}\r\n         * @since 3.11.0\r\n         */\r\n        this.skipCull = false;\r\n\r\n        /**\r\n         * The total number of tiles drawn by the renderer in the last frame.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesDrawn\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.tilesDrawn = 0;\r\n\r\n        /**\r\n         * The total number of tiles in this layer. Updated every frame.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesTotal\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.tilesTotal = this.layer.width * this.layer.height;\r\n\r\n        /**\r\n         * The amount of extra tiles to add into the cull rectangle when calculating its horizontal size.\r\n         *\r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingX\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n        this.cullPaddingX = 1;\r\n\r\n        /**\r\n         * The amount of extra tiles to add into the cull rectangle when calculating its vertical size.\r\n         *\r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingY\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n        this.cullPaddingY = 1;\r\n\r\n        /**\r\n         * The callback that is invoked when the tiles are culled.\r\n         *\r\n         * By default it will call `TilemapComponents.CullTiles` but you can override this to call any function you like.\r\n         *\r\n         * It will be sent 3 arguments:\r\n         *\r\n         * 1. The Phaser.Tilemaps.LayerData object for this Layer\r\n         * 2. The Camera that is culling the layer. You can check its `dirty` property to see if it has changed since the last cull.\r\n         * 3. A reference to the `culledTiles` array, which should be used to store the tiles you want rendered.\r\n         *\r\n         * See the `TilemapComponents.CullTiles` source code for details on implementing your own culling system.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullCallback\r\n         * @type {function}\r\n         * @since 3.11.0\r\n         */\r\n        this.cullCallback = TilemapComponents.CullTiles;\r\n\r\n        /**\r\n         * The rendering (draw) order of the tiles in this layer.\r\n         * \r\n         * The default is 0 which is 'right-down', meaning it will draw the tiles starting from the top-left,\r\n         * drawing to the right and then moving down to the next row.\r\n         * \r\n         * The draw orders are:\r\n         * \r\n         * 0 = right-down\r\n         * 1 = left-down\r\n         * 2 = right-up\r\n         * 3 = left-up\r\n         * \r\n         * This can be changed via the `setRenderOrder` method.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#_renderOrder\r\n         * @type {integer}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._renderOrder = 0;\r\n\r\n        /**\r\n         * An array holding the mapping between the tile indexes and the tileset they belong to.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#gidMap\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.14.0\r\n         */\r\n        this.gidMap = [];\r\n\r\n        this.setTilesets(tileset);\r\n        this.setAlpha(this.layer.alpha);\r\n        this.setPosition(x, y);\r\n        this.setOrigin();\r\n        this.setSize(tilemap.tileWidth * this.layer.width, tilemap.tileHeight * this.layer.height);\r\n\r\n        this.initPipeline('TextureTintPipeline');\r\n    },\r\n\r\n    /**\r\n     * Populates the internal `tileset` array with the Tileset references this Layer requires for rendering.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTilesets\r\n     * @private\r\n     * @since 3.14.0\r\n     * \r\n     * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n     */\r\n    setTilesets: function (tilesets)\r\n    {\r\n        var gidMap = [];\r\n        var setList = [];\r\n        var map = this.tilemap;\r\n\r\n        if (!Array.isArray(tilesets))\r\n        {\r\n            tilesets = [ tilesets ];\r\n        }\r\n\r\n        for (var i = 0; i < tilesets.length; i++)\r\n        {\r\n            var tileset = tilesets[i];\r\n\r\n            if (typeof tileset === 'string')\r\n            {\r\n                tileset = map.getTileset(tileset);\r\n            }\r\n\r\n            if (tileset)\r\n            {\r\n                setList.push(tileset);\r\n\r\n                var s = tileset.firstgid;\r\n\r\n                for (var t = 0; t < tileset.total; t++)\r\n                {\r\n                    gidMap[s + t] = tileset;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.gidMap = gidMap;\r\n        this.tileset = setList;\r\n    },\r\n\r\n    /**\r\n     * Sets the rendering (draw) order of the tiles in this layer.\r\n     * \r\n     * The default is 'right-down', meaning it will order the tiles starting from the top-left,\r\n     * drawing to the right and then moving down to the next row.\r\n     * \r\n     * The draw orders are:\r\n     * \r\n     * 0 = right-down\r\n     * 1 = left-down\r\n     * 2 = right-up\r\n     * 3 = left-up\r\n     * \r\n     * Setting the render order does not change the tiles or how they are stored in the layer,\r\n     * it purely impacts the order in which they are rendered.\r\n     * \r\n     * You can provide either an integer (0 to 3), or the string version of the order.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setRenderOrder\r\n     * @since 3.12.0\r\n     *\r\n     * @param {(integer|string)} renderOrder - The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setRenderOrder: function (renderOrder)\r\n    {\r\n        var orders = [ 'right-down', 'left-down', 'right-up', 'left-up' ];\r\n\r\n        if (typeof renderOrder === 'string')\r\n        {\r\n            renderOrder = orders.indexOf(renderOrder);\r\n        }\r\n\r\n        if (renderOrder >= 0 && renderOrder < 4)\r\n        {\r\n            this._renderOrder = renderOrder;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n     * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n     * internally to optimize recalculating faces when only one tile has been changed.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate.\r\n     * @param {integer} tileY - The y coordinate.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesAt: function (tileX, tileY)\r\n    {\r\n        TilemapComponents.CalculateFacesAt(tileX, tileY, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n     * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n     * is mostly used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesWithin: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n     * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n     * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n     * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#createFromTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n     * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n     * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n     * one-to-one mapping with the indexes array.\r\n     * @param {Phaser.Types.GameObjects.Sprite.SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n     */\r\n    createFromTiles: function (indexes, replacements, spriteConfig, scene, camera)\r\n    {\r\n        return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Returns the tiles in the given layer that are within the cameras viewport.\r\n     * This is used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to run the cull check against.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    cull: function (camera)\r\n    {\r\n        return this.cullCallback(this.layer, camera, this.culledTiles, this._renderOrder);\r\n    },\r\n\r\n    /**\r\n     * Copies the tiles in the source rectangular area to a new destination (all specified in tile\r\n     * coordinates) within the layer. This copies all tile properties & recalculates collision\r\n     * information in the destination region.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} srcTileX - The x coordinate of the area to copy from, in tiles, not pixels.\r\n     * @param {integer} srcTileY - The y coordinate of the area to copy from, in tiles, not pixels.\r\n     * @param {integer} width - The width of the area to copy, in tiles, not pixels.\r\n     * @param {integer} height - The height of the area to copy, in tiles, not pixels.\r\n     * @param {integer} destTileX - The x coordinate of the area to copy to, in tiles, not pixels.\r\n     * @param {integer} destTileY - The y coordinate of the area to copy to, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    copy: function (srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces)\r\n    {\r\n        TilemapComponents.Copy(srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroys this DynamicTilemapLayer and removes its link to the associated LayerData.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#destroy\r\n     * @since 3.0.0\r\n     * \r\n     * @param {boolean} [removeFromTilemap=true] - Remove this layer from the parent Tilemap?\r\n     */\r\n    destroy: function (removeFromTilemap)\r\n    {\r\n        if (removeFromTilemap === undefined) { removeFromTilemap = true; }\r\n\r\n        if (!this.tilemap)\r\n        {\r\n            //  Abort, we've already been destroyed\r\n            return;\r\n        }\r\n\r\n        //  Uninstall this layer only if it is still installed on the LayerData object\r\n        if (this.layer.tilemapLayer === this)\r\n        {\r\n            this.layer.tilemapLayer = undefined;\r\n        }\r\n\r\n        if (removeFromTilemap)\r\n        {\r\n            this.tilemap.removeLayer(this);\r\n        }\r\n\r\n        this.tilemap = undefined;\r\n        this.layer = undefined;\r\n        this.culledTiles.length = 0;\r\n        this.cullCallback = null;\r\n\r\n        this.gidMap = [];\r\n        this.tileset = [];\r\n\r\n        GameObject.prototype.destroy.call(this);\r\n    },\r\n\r\n    /**\r\n     * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n     * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n     * Collision information in the region will be recalculated.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#fill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index to fill the area with.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    fill: function (index, tileX, tileY, width, height, recalculateFaces)\r\n    {\r\n        TilemapComponents.Fill(index, tileX, tileY, width, height, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n     * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#filterTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n     * filter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    filterTiles: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n     * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n     * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n     * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n     * the top-left.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#findByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index value to search for.\r\n     * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n     * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n     * bottom-right. Otherwise it scans from the top-left.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    findByIndex: function (findIndex, skip, reverse)\r\n    {\r\n        return TilemapComponents.FindByIndex(findIndex, skip, reverse, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n     * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n     * true. Similar to Array.prototype.find in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#findTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {FindTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile}\r\n     */\r\n    findTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#forEachTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {EachTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    forEachTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given tile coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n     * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n     * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile object with an index of -1.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates were invalid.\r\n     */\r\n    getTileAt: function (tileX, tileY, nonNull)\r\n    {\r\n        return TilemapComponents.GetTileAt(tileX, tileY, nonNull, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given world coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - X position to get the tile from (given in pixels)\r\n     * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n     * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile object with an index of -1.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n     * were invalid.\r\n     */\r\n    getTileAtWorldXY: function (worldX, worldY, nonNull, camera)\r\n    {\r\n        return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithin: function (tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n     * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinShape: function (shape, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The world x coordinate for the top-left of the area.\r\n     * @param {number} worldY - The world y coordinate for the top-left of the area.\r\n     * @param {number} width - The width of the area.\r\n     * @param {number} height - The height of the area.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinWorldXY: function (worldX, worldY, width, height, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     *\r\n     * @return {boolean} `true` if a tile was found at the given location, otherwise `false`.\r\n     */\r\n    hasTileAt: function (tileX, tileY)\r\n    {\r\n        return TilemapComponents.HasTileAt(tileX, tileY, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {boolean} `true` if a tile was found at the given location, otherwise `false`.\r\n     */\r\n    hasTileAtWorldXY: function (worldX, worldY, camera)\r\n    {\r\n        return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given tile coordinates in the specified layer. You can pass in either an index\r\n     * or a Tile object. If you pass in a Tile, all attributes will be copied over to the specified\r\n     * location. If you pass in an index, only the index at the specified location will be changed.\r\n     * Collision information will be recalculated at the specified location.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    putTileAt: function (tile, tileX, tileY, recalculateFaces)\r\n    {\r\n        return TilemapComponents.PutTileAt(tile, tileX, tileY, recalculateFaces, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given world coordinates (pixels) in the specified layer. You can pass in either\r\n     * an index or a Tile object. If you pass in a Tile, all attributes will be copied over to the\r\n     * specified location. If you pass in an index, only the index at the specified location will be\r\n     * changed. Collision information will be recalculated at the specified location.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    putTileAtWorldXY: function (tile, worldX, worldY, recalculateFaces, camera)\r\n    {\r\n        return TilemapComponents.PutTileAtWorldXY(tile, worldX, worldY, recalculateFaces, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n     * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n     * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n     * index at the specified location will be changed. Collision information will be recalculated\r\n     * within the region tiles were changed.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTilesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    putTilesAt: function (tilesArray, tileX, tileY, recalculateFaces)\r\n    {\r\n        TilemapComponents.PutTilesAt(tilesArray, tileX, tileY, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will receive a new index. If an array of indexes is passed in, then\r\n     * those will be used for randomly assigning new tile indexes. If an array is not provided, the\r\n     * indexes found within the region (excluding -1) will be used for randomly assigning new tile\r\n     * indexes. This method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#randomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {integer[]} [indexes] - An array of indexes to randomly draw from during randomization.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    randomize: function (tileX, tileY, width, height, indexes)\r\n    {\r\n        TilemapComponents.Randomize(tileX, tileY, width, height, indexes, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    removeTileAt: function (tileX, tileY, replaceWithNull, recalculateFaces)\r\n    {\r\n        return TilemapComponents.RemoveTileAt(tileX, tileY, replaceWithNull, recalculateFaces, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given world coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    removeTileAtWorldXY: function (worldX, worldY, replaceWithNull, recalculateFaces, camera)\r\n    {\r\n        return TilemapComponents.RemoveTileAtWorldXY(worldX, worldY, replaceWithNull, recalculateFaces, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n     * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n     * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n     * wherever you want on the screen.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#renderDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n     * @param {Phaser.Types.Tilemaps.StyleConfig} styleConfig - An object specifying the colors to use for the debug drawing.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    renderDebug: function (graphics, styleConfig)\r\n    {\r\n        TilemapComponents.RenderDebug(graphics, styleConfig, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\r\n     * not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#replaceByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} findIndex - The index of the tile to search for.\r\n     * @param {integer} newIndex - The index of the tile to replace it with.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    replaceByIndex: function (findIndex, newIndex, tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.ReplaceByIndex(findIndex, newIndex, tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * You can control if the Cameras should cull tiles before rendering them or not.\r\n     * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n     *\r\n     * However, there are some instances when you may wish to disable this.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setSkipCull\r\n     * @since 3.11.0\r\n     *\r\n     * @param {boolean} [value=true] - Set to `true` to stop culling tiles. Set to `false` to enable culling again.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setSkipCull: function (value)\r\n    {\r\n        if (value === undefined) { value = true; }\r\n\r\n        this.skipCull = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * When a Camera culls the tiles in this layer it does so using its view into the world, building up a\r\n     * rectangle inside which the tiles must exist or they will be culled. Sometimes you may need to expand the size\r\n     * of this 'cull rectangle', especially if you plan on rotating the Camera viewing the layer. Do so\r\n     * by providing the padding values. The values given are in tiles, not pixels. So if the tile width was 32px\r\n     * and you set `paddingX` to be 4, it would add 32px x 4 to the cull rectangle (adjusted for scale)\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCullPadding\r\n     * @since 3.11.0\r\n     *\r\n     * @param {integer} [paddingX=1] - The amount of extra horizontal tiles to add to the cull check padding.\r\n     * @param {integer} [paddingY=1] - The amount of extra vertical tiles to add to the cull check padding.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setCullPadding: function (paddingX, paddingY)\r\n    {\r\n        if (paddingX === undefined) { paddingX = 1; }\r\n        if (paddingY === undefined) { paddingY = 1; }\r\n\r\n        this.cullPaddingX = paddingX;\r\n        this.cullPaddingY = paddingY;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n     * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n     * collision will be enabled (true) or disabled (false).\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollision\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     * @param {boolean} [updateLayer=true] - If true, updates the current tiles on the layer. Set to\r\n     * false if no tiles have been placed for significant performance boost.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollision: function (indexes, collides, recalculateFaces, updateLayer)\r\n    {\r\n        TilemapComponents.SetCollision(indexes, collides, recalculateFaces, this.layer, updateLayer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n     * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n     * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n     * enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} start - The first index of the tile to be set for collision.\r\n     * @param {integer} stop - The last index of the tile to be set for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionBetween: function (start, stop, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n     * that matches the given properties object, its collision flag will be set. The `collides`\r\n     * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n     * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n     * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n     * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n     * \"types\" property that matches any of those values, its collision flag will be updated.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByProperty\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} properties - An object with tile properties and corresponding values that should be checked.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByProperty: function (properties, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n     * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n     * disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByExclusion\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByExclusion: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking each tiles collision group data\r\n     * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n     * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\r\n     * controls if collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionFromCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionFromCollisionGroup: function (collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n     * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n     * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n     * at a specific location on the map then see setTileLocationCallback.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileIndexCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|integer[])} indexes - Either a single tile index, or an array of tile indexes to have a collision callback set for.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileIndexCallback: function (indexes, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\r\n     * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n     * remove it.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileLocationCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {function} [callback] - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} [callbackContext] - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileLocationCallback: function (tileX, tileY, width, height, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n     * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n     * appear to have changed! This method only modifies tile indexes and does not change collision\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#shuffle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    shuffle: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.Shuffle(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#swapByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileA - First tile index.\r\n     * @param {integer} tileB - Second tile index.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    swapByIndex: function (indexA, indexB, tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.SwapByIndex(indexA, indexB, tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldX: function (tileX, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldX(tileX, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldY: function (tileY, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldY(tileY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    tileToWorldXY: function (tileX, tileY, point, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will receive a new index. New indexes are drawn from the given\r\n     * weightedIndexes array. An example weighted array:\r\n     *\r\n     * [\r\n     *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\r\n     *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\r\n     *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\r\n     *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\r\n     * ]\r\n     *\r\n     * The probability of any index being choose is (the index's weight) / (sum of all weights). This\r\n     * method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#weightedRandomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object[]} [weightedIndexes] - An array of objects to randomly draw from during\r\n     * randomization. They should be in the form: { index: 0, weight: 4 } or\r\n     * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    weightedRandomize: function (tileX, tileY, width, height, weightedIndexes)\r\n    {\r\n        TilemapComponents.WeightedRandomize(tileX, tileY, width, height, weightedIndexes, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileX: function (worldX, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileY: function (worldY, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n     * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    worldToTileXY: function (worldX, worldY, snapToFloor, point, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, this.layer);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = DynamicTilemapLayer;\r\n"},"lineCount":null}},"error":null,"hash":"14c1c8daf68ec9a48781c20591cccc87","cacheData":{"env":{}}}